---
Test
---
| import |
| se.uu.ub.cora.fitnesseintegration |
| se.uu.ub.cora.fitnesseintegration.compare |

!1 Record part
Record parts makes it possible to set up read and write restrictions on parts of a record. It is only possible to add the restrictions directly to children of the top level dataGroup in the record.

Data sent from the server, collects read restrictions from the  recordTypes  metadataGroup linked through metadataId. A user gets its  record part read permissions from rules with the READ action. Record  parts that the user does not have read permission for are redacted  before the data is returned to the user. All ways a user can get data  from the server is checked for read permissions and data possibly  redacted, this include data for the obvious read cases: read, search and list, but also for data returned from actions that create or update data such as:  create and update. The use of the same restrictions and rules to  calculate what data to possibly redact is done to get a consistent and  easy way to know what restrictions and rules are in play for data  returned to users.

Data sent to the server for create and update actions,  collects write restrictions from the recordTypes metadataGroup linked through newMetadataId and metadataId respectively. A user gets its write record part permissions for create, from rules with CREATE action, and update from rules matching   UPDATE action. Record parts that the user does not have write permission for is removed from the data before it is further handled by the system. If the action is update and the previous version, stored on the server, had data for the removed record parts, is the stored record parts merged back into the record before it is updated.

The record returned to the user also contains lists with read and create permissions,  these lists are based on rules that have READ and UPDATE action  respectively. These returned lists are intended to be used by clients to know how to handle record parts for the returned record.

!***> Why restrictions on top level only

!include -seamless .TheRestTests.CallThroughJavaCode.BuiltInMetadataFunctionality.RecordPart.WhyOnlyTopLevel
*!
!2 Restrictions
Restrictions are set in metadata as a relation between the top level data group, in a record, and the first level children. There are two types of restrictions, read and write. A read restriction prevents data from leaving the server and a write restriction prevents data from beeing updated on the server.

A set read restriction implies a write restriction on the same record part, because a user is not allowed to change information that it can not see.

!2 Permissions
Permissions are given in rules, later connected to users through roles. There are two types of permissions, read and write. A read permission gives the user permission to read, read restricted record parts, from the server and a write permission gives the user permission to update write restricted record parts on the server.

A given write permission implies a read permission on the same record part, because a user must be able to read the information it is allowed to change.

!include .TheRestTests.CallThroughJavaCode.BuiltInMetadataFunctionality.RecordPart.RecordPartMetadata
!include .TheRestTests.CallThroughJavaCode.BuiltInMetadataFunctionality.RecordPart.RecordPartCreate
!include .TheRestTests.CallThroughJavaCode.BuiltInMetadataFunctionality.RecordPart.RecordPartRead
!include .TheRestTests.CallThroughJavaCode.BuiltInMetadataFunctionality.RecordPart.RecordPartUpdate
!include .TheRestTests.CallThroughJavaCode.BuiltInMetadataFunctionality.RecordPart.RecordPartList
!include .TheRestTests.CallThroughJavaCode.BuiltInMetadataFunctionality.RecordPart.RecordPartSearch
!include .TheRestTests.CallThroughJavaCode.BuiltInMetadataFunctionality.RecordPart.RecordPartCleanup
