This is an example that shows why it is hard/impossible to solve merge problems at the server if we were to allow for restrictions below the top level dataGroup.

If we have a simple top level dataGroup as follows:

 * topLevel
   * child1 (dataGroup, 2-2)
     * child1.1 (1-1, readRestriction)
     * child1.2 (1-1, noRestriction)

The server has data as follows, when a user, without read permission requests, the data will the children in italics (child 1.1) be redacted before the user gets the data:

 * topLevel
   * child1 (repeatId=a)
     * ''child1.1 (value=a)''
     * child1.2 (value=a)
   * child1 (repeatId=b)
     * ''child1.1 (value=b)''
     * child1.2 (value=b)

When the user returns the data to the server  will of course children 1.1 not be returned and the server should merge them back into the data before the record is stored. But the user might have made changes, removed child1 (a) completely, added a new child1 (c), and changed the value of b:s child 1.2 to a, with the result:

 * topLevel
   * child1 (repeatId=b)
     * child1.2 (value=a)
   * child1 (repeatId=c)
     * child1.2 (value=c)

The problem is that children on level 1 are not guaranteed to be in the  same order or even containing the same data in the version the user  sends back, so the server might merge redacted information back into the  wrong child. If the server merges the data it had from the begining would the result could be:

 * topLevel
   * child1 (repeatId=b)
     * child1.1 (value=b)
     * child1.2 (value=a)
   * child1 (repeatId=c)
     * child1.1 (value=unknown / or a)
     * child1.2 (value=c)

The result of the merge would put child1.1:s value b together with child 1.2:s value a, and it would be impossible to know what to do with the old value a.
