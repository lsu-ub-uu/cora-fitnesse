---
Static
---
!2 Create
There are a few different cases for create that can happen, when there are write restrictions:

 * '''Case 1''': A user (fitnesseAdmin) has write permission on all restricted data, create as normal
 * A user (fitnesseUser) has write permission on som but not all restricted data, there are three subcases
   * '''Case 2''': Only recordParts that the user has write permissions for is sent to create, create as normal
   * '''Case 3''': Data for recordParts that the user does not have write permission for is sent to create. The write protected parts that the user does not have write permission for, should not be added to the new record, all other data should be added and the record created.
   * '''Case 4a''': Top level, A recordPart that the user does not have write permission for is mandatory (must be present), whether the user sends data for the restricted parts or not does not matter, the end result should be that the record is missing the mandatory restricted data parts and record creation should fail with an error
   * '''Case 4b''': Below top level, A recordPart that the user does not have write permission for is mandatory (must be present), whether the user sends data for the restricted parts or not does not matter, the end result should be that the record is missing the mandatory restricted data parts and record creation should fail with an error

!***> Case 1

!define currentAuthToken {$adminAuthToken}
!-Create a new testWorkout record as fitnesseAdmin, adding unrestricted and all restricted data parts-!

!include -seamless .TheRestTests.CallThroughJavaCode.BuiltInMetadataFunctionality.RecordPart.dataCirkelfysCirkelfys1
!define expectedCreateResult {CREATED}
!define expectedAnswer {}
!define expectedCompareResult {OK}
!define expectedActionResult {Action read_incoming_links is missing.}
!define expectedPermissionResult {OK}
!include -seamless .HelperPages.createCheckReadCheck
*!
!***> Case 2

!define currentAuthToken {$userAuthToken}
!-Create a new testWorkout record as fitnesseUser, the record will contain only parts that the user has write permissions for.-!

!include -seamless .TheRestTests.CallThroughJavaCode.BuiltInMetadataFunctionality.RecordPart.dataCirkelfysCirkelfys2
!define expectedCreateResult {CREATED}
!define expectedAnswer {}
!define expectedCompareResult {OK}
!define expectedActionResult {Action delete is missing. Action index is missing. Action read_incoming_links is missing.}
!define expectedPermissionResult {OK}
!include -seamless .HelperPages.createCheckReadCheck
*!
!***> Case 3

!-Create a new testWorkout record as fitnesseUser, the record contains all the parts including those which the user has no write permissions for. Only the parts that the user has write permissions will be created-!

!include -seamless .TheRestTests.CallThroughJavaCode.BuiltInMetadataFunctionality.RecordPart.dataCirkelfysCirkelfys3
!define expectedCreateResult {CREATED}
!define expectedAnswer {}
!define expectedCompareResult {Child with nameInData numOfParticipants2 and type atomic is missing. Child with nameInData instructorId2 and type atomic is missing. Child with nameInData instructorId3 and type atomic is missing. Child with nameInData laps1_2 and type atomic is missing. Child with nameInData duration1_2 and type atomic is missing. Child with nameInData duration1_3 and type atomic is missing. Child with nameInData firstName1_2 and type atomic is missing. Child with nameInData lastName1_2 and type atomic is missing. Child with nameInData lastName1_3 and type atomic is missing. Child with nameInData instructorName2 and type group is missing. Child with nameInData ratingDate1_2 and type atomic is missing. Child with nameInData voteCount1_2 and type atomic is missing. Child with nameInData voteCount1_3 and type atomic is missing. Child with nameInData popularity2 and type group is missing. Child with nameInData popularity3 and type group is missing.}
!define expectedPermissionResult {OK}
!include -seamless .HelperPages.createCheckReadCheck
*!
!***> Clean up no longer needed cirkelfys2 and cirkelfys3

#!| RecordEndpointFixture |
#| authToken | type | id | testDeleteRecord? | getStatusType? |
#| $adminAuthToken | testWorkout | cirkelfys2 | | OK |
#| $adminAuthToken | testWorkout | cirkelfys3 | | OK |

*!
!***> Case 4a

!-Remove the permission on popularity1-!

!include -seamless <RecordPart.RecordPartRemoveWritePermissionOnPopularity
!-Try to create a new testWorkout record with fitnesseUser. The data used will be the same as Cirkelfys2. Note that popularity1 is sent but we do not have permissions to write on that part.-!

!include -seamless .TheRestTests.CallThroughJavaCode.BuiltInMetadataFunctionality.RecordPart.dataCirkelfysCirkelfys2
!define expectedCreateResult {BAD_REQUEST}
!define expectedAnswer {Data is not valid: [Did not find enough data children with referenceId: testPopularity1Group(with nameInData:popularity1.]}
!define expectedPermissionResult {popularity1}

!include -seamless .HelperPages.createRecord
!include -seamless <RecordPart.RecordPartRestoreWritePermissionLimitedForTestWorkoutCreateRule
*!
!***> Case 4b

!-Remove the permission on firstName1_1-!

!include -seamless <RecordPart.RecordPartRemoveWritePermissionOnFirstName1_1
!-Try to create a new testWorkout record with fitnesseUser. The data used will be the same as Cirkelfys2. Note that popularity1 is sent but we do not have permissions to write on that part.-!

!include -seamless .TheRestTests.CallThroughJavaCode.BuiltInMetadataFunctionality.RecordPart.dataCirkelfysCirkelfys2
!define expectedCreateResult {BAD_REQUEST}
!define expectedAnswer {Data is not valid: [Did not find enough data children with referenceId: testInstructorFirstName1_1TextVar(with nameInData:firstName1_1.]}
!define expectedPermissionResult {firstName1_1}
!include -seamless .HelperPages.createRecord
!include -seamless <RecordPart.RecordPartRestoreWritePermissionLimitedForTestWorkoutCreateRule
*!
