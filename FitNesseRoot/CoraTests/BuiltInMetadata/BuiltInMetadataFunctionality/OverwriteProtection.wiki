---
Test
---
!1 Overwrite Protection
The "Overwrite Protection" functionality ensures data integrity by preventing unintended data loss when multiple users attempt to update the same record simultaneously. The system uses a flag, ignoreOverwriteProtection, which, when set, allows users to bypass the Overwrite protection mechanism.

!***> Test setup
!include -seamless .HelperPages.defineAdminAuthToken
!define recordType {fitnesseRecordType}
!define createData {!-{"name":"fitnesseExample","children":[{"name":"recordInfo","children":[{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"fitnesseValidationType"}]},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"cora"}]}]},{"name":"fitnesseOnlyOneTextVar","value":"hejsan"}]}-!}
!define expectedCreateResult {CREATED}
!define expectedAnswer {}

!include -seamless .HelperPages.createRecord
*!  

!3 Test Case 1: Successful update in succession
'''Test Description:''' 
    Verify that the system allows two users are allowed to update a record successfully in succession.

'''Test Steps:'''
        User A retrieves the record for editing.
        User A updates the record.
        User A saves the changes.
        User B then retrieves the same record for editing.
        User B updates the record.
        User B saves the changes.
        Confirm that the system reflects the updated information.

'''Expected Result:''' 
    The system accepts the changes without conflicts, and the record is updated successfully.
         
!***> Test Case 1: Successful Update
!***> User A fetch and updates a record
!| ChildComparerFixture |
| authToken | type | id | testReadAndStoreRecord? |
| ${currentAuthToken} | ${recordType} | ${recordId} | $readRecordData= |

!| script | DataHandlerScript |
| $response= | extractDataElement | $readRecordData |

!define updateData {$response}
!define expectedUpdateResult {OK}
!define expectedAnswer {}
!define recordId {$createdRecordId}

!include -seamless .HelperPages.updateRecord
*!

!***> After User A have saved a new version User B then fetch and updates the same record
!| ChildComparerFixture |
| authToken | type | id | testReadAndStoreRecord? |
| ${currentAuthToken} | ${recordType} | ${recordId} | $readRecordData= |

!| script | DataHandlerScript |
| $response= | extractDataElement | $readRecordData |

!define updateData {$response}
!define expectedUpdateResult {OK}
!define expectedAnswer {}

!include -seamless .HelperPages.updateRecord
*!
*!    

!3 Test Case 2: Concurrent Updates - With Overwrite Protection
'''Test Description:''' Verify that the system prevents data loss by applying Overwrite protection.

'''Test Steps:'''
		User A retrieves the record for editing.
        User B retrieves the same record for editing that User A is working on.
        User A updates the record and saves changes.
        User B attempts to save changes without refreshing the record.

'''Expected Result:''' The system detects that User B's version is outdated and blocks the update due to conflicting data

!***> Test Case 2: Concurrent Updates - With Overwrite Protection
!***> User A fetch a record
!| ChildComparerFixture |
| authToken | type | id | testReadAndStoreRecord? |
| ${currentAuthToken} | ${recordType} | ${recordId} | $readRecordDataUserA= |

!| script | DataHandlerScript |
| $responseUserA= | extractDataElement | $readRecordDataUserA |
*!

!***> User B fetch the same record as user A
!| ChildComparerFixture |
| authToken | type | id | testReadAndStoreRecord? |
| ${currentAuthToken} | ${recordType} | ${recordId} | $readRecordDataUserB= |

!| script | DataHandlerScript |
| $responseUserB= | extractDataElement | $readRecordDataUserB |
*!

!***> User A updates the record creating a new version
!define updateData {$responseUserA}
!define expectedUpdateResult {OK}
!define expectedAnswer {}

!include -seamless .HelperPages.updateRecord
*!

!***> User B tries to update the same record with an older version
!define updateData {$responseUserB}
!define expectedUpdateResult {CONFLICT}
!define expectedAnswer {}

!include -seamless .HelperPages.updateRecord
*!
*!

!3 Test Case 3: Stale Data Detection with Overwrite Protection Bypass
'''Test Description''': Confirm that the system allows bypassing Overwrite protection when the ''ignoreOverwriteProtection'' flag is used.

'''Test Steps:'''
        User B forcefully overwrite a post with older updated date using the ''ignoreOverwriteProtection'' flag.
        Verify that the ''ignoreOverwriteProtection'' flag is removed from the record after User B have forced an update

'''Expected Result:''' The system allows User B to save changes even though the data is stale, as the ''ignoreOverwriteProtection'' flag is used.

!***> Test Case 3: Stale Data Detection with Overwrite Protection Bypass

!***> User B forcefully updates the record with an older version of it by using the ''ignoreOverwriteProtection'' flag

!define updateData {!-{"children":[{"children":[{"children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"fitnesseValidationType"}],"name":"validationType"},{"name":"ignoreOverwriteProtection","value":"true"},{"children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"cora"}],"name":"dataDivider"},{"name":"id","value":"-!${recordId}!-"},{"children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"fitnesseRecordType"}],"name":"type"},{"repeatId":"0","children":[{"children":[{"name":"linkedRecordType","value":"user"},{"name":"linkedRecordId","value":"131313"}],"name":"updatedBy"},{"name":"tsUpdated","value":"2024-01-22T09:06:24.248823Z"}],"name":"updated"},{"children":[{"name":"linkedRecordType","value":"user"},{"name":"linkedRecordId","value":"131313"}],"name":"createdBy"},{"name":"tsCreated","value":"2024-01-22T09:06:24.248823Z"}],"name":"recordInfo"},{"name":"fitnesseOnlyOneTextVar","value":"hejsan"}],"name":"fitnesseExample"}-!}
!define expectedUpdateResult {OK}
!define expectedAnswer {=~/^(?!.*ignoreOverwriteProtection).*/}

!include -seamless .HelperPages.updateRecord
*!

!***> Verify that the ''ignoreOverwriteProtection'' flag is removed from the record
*!
*!

!3 Test Case 4: Try to force an update using an erroneous setting on ''ignoreOverwriteProtection'' 
'''Test Description''': Confirm that the system does not allow bypassing Overwrite protection when the ''ignoreOverwriteProtection'' have an incorrect setting (not ''true'').

'''Test Steps:'''
        User B tries to update a post using old update date by using an erroneous ''ignoreOverwriteProtection'' flag setting.

'''Expected Result:''' The system does not allow User B to save changes due to erroneous ''ignoreOverwriteProtection'' flag setting.

!***> Test Case 4: Try to force an update using an erroneous setting on ''ignoreOverwriteProtection'' 

!***> User B forcefully tries to update a record with an older version of it by using an erroneous ''ignoreOverwriteProtection'' flag
!define updateData {!-{"children":[{"children":[{"children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"fitnesseValidationType"}],"name":"validationType"},{"name":"ignoreOverwriteProtection","value":"someInvalidValue"},{"children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"cora"}],"name":"dataDivider"},{"name":"id","value":"-!${recordId}!-"},{"children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"fitnesseRecordType"}],"name":"type"},{"repeatId":"0","children":[{"children":[{"name":"linkedRecordType","value":"user"},{"name":"linkedRecordId","value":"131313"}],"name":"updatedBy"},{"name":"tsUpdated","value":"2024-01-22T09:06:24.248823Z"}],"name":"updated"},{"children":[{"name":"linkedRecordType","value":"user"},{"name":"linkedRecordId","value":"131313"}],"name":"createdBy"},{"name":"tsCreated","value":"2024-01-22T09:06:24.248823Z"}],"name":"recordInfo"},{"name":"fitnesseOnlyOneTextVar","value":"hejsan"}],"name":"fitnesseExample"}-!}
!define expectedUpdateResult {CONFLICT}
!define expectedAnswer {Could not update record because it exist a newer version of the record in the storage.}

!include -seamless .HelperPages.updateRecord
*!
*!

!***> CleanUp test
!| RecordEndpointFixture |
| authToken | type | id | testDeleteRecord? | getStatusType? |
| $adminAuthToken | fitnesseRecordType | $createdRecordId | | OK |
*!  
