---
Test
---
!1 Metacreator for validation type
Metacreator will create the following data if it does not exist in storage.
 * Metadata group for definitionNew and definitionUpdate.
 * Presentations for new and update.
 * Text and defText.
 * Links for definitions, presentations and texts.

 * '''Case 1''': When creating a validation type, if groups, presentations or text are NOT specified but not existing then they should be created.
 * '''Case 2''': When creating a validation type, if groups, presentations or text are specified but not existing then they should be created.
 * '''Case 3''': When creating a validation type, if groups, presentations, texts and links exists then no extra metadata is created.
 * '''Case 4''': If ''validatesRecordtype'' does not exist, no groups and presentations are created and the creation should fail on the validation phase.

!***> '''Case1'''
!***> Make sure no metadata, texts and presentations already exist
Read definition for new (metacreatorValidationTypeGroup) and definition for update (metacreatorValidationTypeGroup)
!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| metacreatorValidationTypeGroup | metadata | | NOT_FOUND |
| metacreatorValidationTypeNewGroup | metadata | | NOT_FOUND |

Read presentations for new form (metacreatorValidationTypeNewPGroup) and update form (metacreatorValidationTypePGroup)
!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| metacreatorValidationTypeNewPGroup | presentation | | NOT_FOUND |
| metacreatorValidationTypePGroup | presentation | | NOT_FOUND |

 Read text (metacreatorValidationTypeText) and definition text (metacreatorValidationTypeDefText)
!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| metacreatorValidationTypeText | text | | NOT_FOUND |
| metacreatorValidationTypeDefText | text | | NOT_FOUND |
*!
!2 
The following test will create a validationType without any references to texts, groups nor presentations. It will then validate the answer from server making sure texts, groups and presentations and linked to the new validation type 
!***> Create data of validationType (metacreatorValidationType)

!define currentAuthToken {$adminAuthToken}
!define recordType {validationType}
!define recordId {metacreatorValidationType}
!define recordPermissions {!-{}-!}

!define createData {!-{"name":"validationType","children":[{"name":"recordInfo","children":[{"name":"id","value":"metacreatorValidationType"},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"validationType"}]},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"cora"}]}]},{"name":"validatesRecordType","children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"fitnesseRecordType"}]}]}-!}
!define expectedCreatedData {!-{"name":"validationType","children":[{"name":"recordInfo","children":[{"name":"id","value":"metacreatorValidationType"},{"name":"type","children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"validationType"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"validationType"}]},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"cora"}]}]},{"name":"textId","children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"metacreatorValidationTypeText"}]},{"name":"defTextId","children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"metacreatorValidationTypeDefText"}]},{"name":"newMetadataId","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"metacreatorValidationTypeNewGroup"}]},{"name":"newPresentationFormId","children":[{"name":"linkedRecordType","value":"presentation"},{"name":"linkedRecordId","value":"metacreatorValidationTypeNewPGroup"}]},{"name":"metadataId","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"metacreatorValidationTypeGroup"}]},{"name":"presentationFormId","children":[{"name":"linkedRecordType","value":"presentation"},{"name":"linkedRecordId","value":"metacreatorValidationTypePGroup"}]},{"name":"validatesRecordType","children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"fitnesseRecordType"}]}]}-!}

!define expectedCreateResult {CREATED}
!define expectedAnswer {}
!define expectedCompareResult {OK}
!define expectedActionResult {Action read_incoming_links is missing.}
!define expectedPermissionResult {OK}

!include -seamless .HelperPages.createCheckReadCheck
*!

!***> Make sure groups, texts and presentations have been created and exists in storage.
Read definition for new (metacreatorValidationTypeGroup) and definition for update (metacreatorValidationTypeGroup)
!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| metacreatorValidationTypeGroup | metadata | | OK |
| metacreatorValidationTypeNewGroup | metadata | | OK |

Read presentations for new form (metacreatorValidationTypeNewPGroup) and update form (metacreatorValidationTypePGroup)
!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| metacreatorValidationTypeNewPGroup | presentation | | OK |
| metacreatorValidationTypePGroup | presentation | | OK |

 Read text (metacreatorValidationTypeText) and definition text (metacreatorValidationTypeDefText)
!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| metacreatorValidationTypeText | text | | OK |
| metacreatorValidationTypeDefText | text | | OK |
*!

!***> Clean up

!| RecordEndpointFixture |
| authToken | type | id | testDeleteRecord? | getStatusType? |
| $adminAuthToken | validationType | metacreatorValidationType | | OK |
| $adminAuthToken | text | metacreatorValidationTypeText | | OK |
| $adminAuthToken | text | metacreatorValidationTypeDefText | | OK |
| $adminAuthToken | presentation | metacreatorValidationTypeNewPGroup | | OK |
| $adminAuthToken | presentation | metacreatorValidationTypePGroup | | OK |
| $adminAuthToken | metadata | metacreatorValidationTypeGroup | | OK |
| $adminAuthToken | metadata | metacreatorValidationTypeNewGroup | | OK |
*!
*!
!***> '''Case2'''
!***> Make sure no metadata, texts and presentations already exist
Read definition for new (metacreatorValidationTypeGroup) and definition for update (metacreatorValidationTypeGroup)
!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| noExistingFitnesseNewGroup | metadata | | NOT_FOUND |
| noExistingFitnesseGroup | metadata | | NOT_FOUND |

Read presentations for new form (metacreatorValidationTypeNewPGroup) and update form (metacreatorValidationTypePGroup)
!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| noExistingFitnesseNewPGroup | presentation | | NOT_FOUND |
| noExistingFitnessePGroup | presentation | | NOT_FOUND |

 Read text (metacreatorValidationTypeText) and definition text (metacreatorValidationTypeDefText)
!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| noExistingFitnesseText | text | | NOT_FOUND |
| noExistingFitnesseDefText | text | | NOT_FOUND |
*!
!2 
The following test will create a validationType with a references to texts, groups and presentations. It will then validate the answer from server making sure texts, groups and presentations and linked to the new validation type 
!***> Create data of validationType (metacreatorValidationType)

!define currentAuthToken {$adminAuthToken}
!define recordType {validationType}
!define recordId {metacreatorValidationType}
!define recordPermissions {!-{}-!}

!define createData {!-{"name":"validationType","children":[{"name":"recordInfo","children":[{"name":"id","value":"metacreatorValidationType"},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"validationType"}]},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"cora"}]}]},{"name":"textId","children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"noExistingFitnesseText"}]},{"name":"defTextId","children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"noExistingFitnesseDefText"}]},{"name":"newMetadataId","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"noExistingFitnesseNewGroup"}]},{"name":"newPresentationFormId","children":[{"name":"linkedRecordType","value":"presentation"},{"name":"linkedRecordId","value":"noExistingFitnesseNewPGroup"}]},{"name":"metadataId","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"noExistingFitnesseGroup"}]},{"name":"presentationFormId","children":[{"name":"linkedRecordType","value":"presentation"},{"name":"linkedRecordId","value":"noExistingFitnessePGroup"}]},{"name":"validatesRecordType","children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"fitnesseRecordType"}]}]}-!}
!define expectedCreatedData {!-{"name":"validationType","children":[{"name":"recordInfo","children":[{"name":"id","value":"metacreatorValidationType"},{"name":"type","children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"validationType"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"validationType"}]},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"cora"}]}]},{"name":"textId","children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"noExistingFitnesseText"}]},{"name":"defTextId","children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"noExistingFitnesseDefText"}]},{"name":"newMetadataId","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"noExistingFitnesseNewGroup"}]},{"name":"newPresentationFormId","children":[{"name":"linkedRecordType","value":"presentation"},{"name":"linkedRecordId","value":"noExistingFitnesseNewPGroup"}]},{"name":"metadataId","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"noExistingFitnesseGroup"}]},{"name":"presentationFormId","children":[{"name":"linkedRecordType","value":"presentation"},{"name":"linkedRecordId","value":"noExistingFitnessePGroup"}]},{"name":"validatesRecordType","children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"fitnesseRecordType"}]}]}-!}

!define expectedCreateResult {CREATED}
!define expectedAnswer {}
!define expectedCompareResult {OK}
!define expectedActionResult {Action read_incoming_links is missing.}
!define expectedPermissionResult {OK}

!include -seamless .HelperPages.createCheckReadCheck
*!

!***> Make sure groups, texts and presentations have been created and exists in storage.
Read definition for new (metacreatorValidationTypeGroup) and definition for update (metacreatorValidationTypeGroup)
!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| noExistingFitnesseNewGroup | metadata | | OK |
| noExistingFitnesseGroup | metadata | | OK |

Read presentations for new form (metacreatorValidationTypeNewPGroup) and update form (metacreatorValidationTypePGroup)
!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| noExistingFitnesseNewPGroup | presentation | | OK |
| noExistingFitnessePGroup | presentation | | OK |

 Read text (metacreatorValidationTypeText) and definition text (metacreatorValidationTypeDefText)
!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| noExistingFitnesseText | text | | OK |
| noExistingFitnesseDefText | text | | OK |
*!

!***> Clean up

!| RecordEndpointFixture |
| authToken | type | id | testDeleteRecord? | getStatusType? |
| $adminAuthToken | validationType | metacreatorValidationType | | OK |
| $adminAuthToken | text | noExistingFitnesseText | | OK |
| $adminAuthToken | text | noExistingFitnesseDefText | | OK |
| $adminAuthToken | presentation | noExistingFitnesseNewPGroup | | OK |
| $adminAuthToken | presentation | noExistingFitnessePGroup | | OK |
| $adminAuthToken | metadata | noExistingFitnesseGroup | | OK |
| $adminAuthToken | metadata | noExistingFitnesseNewGroup | | OK |
| $adminAuthToken | text | noExistingFitnesseGroupDefText | | OK |
| $adminAuthToken | text | noExistingFitnesseGroupText | | OK |
| $adminAuthToken | text | noExistingFitnesseNewGroupDefText | | OK |
| $adminAuthToken | text | noExistingFitnesseNewGroupText | | OK |
*!
*!
!***> '''Case3'''
!***> Make sure no metadata, texts and presentations already exist
Read definition for new (metacreatorValidationTypeGroup) and definition for update (metacreatorValidationTypeGroup)
!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| fitnesseNewGroup | metadata | | OK |
| fitnesseGroup | metadata | | OK |

Read presentations for new form (metacreatorValidationTypeNewPGroup) and update form (metacreatorValidationTypePGroup)
!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| fitnesseNewPGroup | presentation | | OK |
| fitnessePGroup | presentation | | OK |

 Read text (metacreatorValidationTypeText) and definition text (metacreatorValidationTypeDefText)
!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| fitnesseText | text | | OK |
*!
!2 
The following test will create a validationType with a references to texts, groups and presentations. It will then validate the answer from server making sure texts, groups and presentations and linked to the new validation type 
!***> Create data of validationType (metacreatorValidationType)

!define currentAuthToken {$adminAuthToken}
!define recordType {validationType}
!define recordId {metacreatorValidationType}
!define recordPermissions {!-{}-!}

!define createData {!-{"name":"validationType","children":[{"name":"recordInfo","children":[{"name":"id","value":"metacreatorValidationType"},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"validationType"}]},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"cora"}]}]},{"name":"textId","children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"fitnesseText"}]},{"name":"defTextId","children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"fitnesseDefText"}]},{"name":"newMetadataId","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"fitnesseNewGroup"}]},{"name":"newPresentationFormId","children":[{"name":"linkedRecordType","value":"presentation"},{"name":"linkedRecordId","value":"fitnesseNewPGroup"}]},{"name":"metadataId","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"fitnesseGroup"}]},{"name":"presentationFormId","children":[{"name":"linkedRecordType","value":"presentation"},{"name":"linkedRecordId","value":"fitnessePGroup"}]},{"name":"validatesRecordType","children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"fitnesseRecordType"}]}]}-!}
!define expectedCreatedData {!-{"name":"validationType","children":[{"name":"recordInfo","children":[{"name":"id","value":"metacreatorValidationType"},{"name":"type","children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"validationType"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"validationType"}]},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"cora"}]}]},{"name":"textId","children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"fitnesseText"}]},{"name":"defTextId","children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"fitnesseDefText"}]},{"name":"newMetadataId","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"fitnesseNewGroup"}]},{"name":"newPresentationFormId","children":[{"name":"linkedRecordType","value":"presentation"},{"name":"linkedRecordId","value":"fitnesseNewPGroup"}]},{"name":"metadataId","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"fitnesseGroup"}]},{"name":"presentationFormId","children":[{"name":"linkedRecordType","value":"presentation"},{"name":"linkedRecordId","value":"fitnessePGroup"}]},{"name":"validatesRecordType","children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"fitnesseRecordType"}]}]}-!}

!define expectedCreateResult {CREATED}
!define expectedAnswer {}
!define expectedCompareResult {OK}
!define expectedActionResult {Action read_incoming_links is missing.}
!define expectedPermissionResult {OK}
!include -seamless .HelperPages.createCheckReadCheck

Now it validates that no autogenerated group, presentation or texts are linked to the validation type.
!define expectedCreatedData {!-{"name":"validationType","children":[{"name":"recordInfo","children":[{"name":"id","value":"metacreatorValidationType"},{"name":"type","children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"validationType"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"validationType"}]},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"cora"}]}]},{"name":"textId","children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"metacreatorValidationTypeText"}]},{"name":"defTextId","children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"metacreatorValidationTypeDefText"}]},{"name":"newMetadataId","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"metacreatorValidationTypeNewGroup"}]},{"name":"newPresentationFormId","children":[{"name":"linkedRecordType","value":"presentation"},{"name":"linkedRecordId","value":"metacreatorValidationTypeNewPGroup"}]},{"name":"metadataId","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"metacreatorValidationTypeGroup"}]},{"name":"presentationFormId","children":[{"name":"linkedRecordType","value":"presentation"},{"name":"linkedRecordId","value":"metacreatorValidationTypePGroup"}]},{"name":"validatesRecordType","children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"fitnesseRecordType"}]}]}-!}

!define expectedCompareResult {Did not find a match for child with nameInData linkedRecordId and value metacreatorValidationTypeText. Did not find a match for child with nameInData linkedRecordId and value metacreatorValidationTypeDefText. Did not find a match for child with nameInData linkedRecordId and value metacreatorValidationTypeNewGroup. Did not find a match for child with nameInData linkedRecordId and value metacreatorValidationTypeNewPGroup. Did not find a match for child with nameInData linkedRecordId and value metacreatorValidationTypeGroup. Did not find a match for child with nameInData linkedRecordId and value metacreatorValidationTypePGroup.}

!include -seamless .HelperPages.readCheck
*!

!***> Make sure no new groups, texts and presentations have been created.
Read definition for new (metacreatorValidationTypeGroup) and definition for update (metacreatorValidationTypeGroup)
!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| metacreatorValidationTypeGroup | metadata | | NOT_FOUND |
| metacreatorValidationTypeNewGroup | metadata | | NOT_FOUND |

Read presentations for new form (metacreatorValidationTypeNewPGroup) and update form (metacreatorValidationTypePGroup)
!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| metacreatorValidationTypeNewPGroup | presentation | | NOT_FOUND |
| metacreatorValidationTypePGroup | presentation | | NOT_FOUND |

 Read text (metacreatorValidationTypeText) and definition text (metacreatorValidationTypeDefText)
!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| metacreatorValidationTypeText | text | | NOT_FOUND |
| metacreatorValidationTypeDefText | text | | NOT_FOUND |
*!

!***> Clean up
!| RecordEndpointFixture |
| authToken | type | id | testDeleteRecord? | getStatusType? |
| $adminAuthToken | validationType | metacreatorValidationType | | OK |
*!
*!
!***> '''Case4'''
!***> Make sure no metadata, texts and presentations already exist
Read definition for new (metacreatorValidationTypeGroup) and definition for update (metacreatorValidationTypeGroup)
!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| metacreatorValidationTypeGroup | metadata | | NOT_FOUND |
| metacreatorValidationTypeNewGroup | metadata | | NOT_FOUND |

Read presentations for new form (metacreatorValidationTypeNewPGroup) and update form (metacreatorValidationTypePGroup)
!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| metacreatorValidationTypeNewPGroup | presentation | | NOT_FOUND |
| metacreatorValidationTypePGroup | presentation | | NOT_FOUND |

 Read text (metacreatorValidationTypeText) and definition text (metacreatorValidationTypeDefText)
!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| metacreatorValidationTypeText | text | | NOT_FOUND |
| metacreatorValidationTypeDefText | text | | NOT_FOUND |
*!
!2 
The following test will create a validationType without any references to texts, groups nor presentations. It will then validate the answer from server making sure texts, groups and presentations and linked to the new validation type 
!***> Create data of validationType (metacreatorValidationType)

!define currentAuthToken {$adminAuthToken}
!define recordType {validationType}
!define recordId {metacreatorValidationType}

!define createData {!-{"name":"validationType","children":[{"name":"recordInfo","children":[{"name":"id","value":"metacreatorValidationType"},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"validationType"}]},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"cora"}]}]},{"name":"validatesRecordType","children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"noExistingfitnesseRecordType"}]}]}-!}

!define expectedCreateResult {BAD_REQUEST}
!define expectedAnswer {Error creating new record for recordType: validationType. Data is not valid: Record for validates record type could not be found in storage.}

!include -seamless .HelperPages.createRecord
*!

!***> Make sure groups, texts and presentations do not exist in storage.
Read definition for new (metacreatorValidationTypeGroup) and definition for update (metacreatorValidationTypeGroup)
!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| metacreatorValidationTypeGroup | metadata | | NOT_FOUND |
| metacreatorValidationTypeNewGroup | metadata | | NOT_FOUND |

Read presentations for new form (metacreatorValidationTypeNewPGroup) and update form (metacreatorValidationTypePGroup)
!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| metacreatorValidationTypeNewPGroup | presentation | | NOT_FOUND |
| metacreatorValidationTypePGroup | presentation | | NOT_FOUND |

 Read text (metacreatorValidationTypeText) and definition text (metacreatorValidationTypeDefText)
!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| metacreatorValidationTypeText | text | | NOT_FOUND |
| metacreatorValidationTypeDefText | text | | NOT_FOUND |
*!
*!

