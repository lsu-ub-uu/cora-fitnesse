---
Static
---
!2 Create
 * '''Case 1:''' It must be possible to store a new record in the archive
 * '''Case 2:''' It must be possible to store a new binary in the archive
   * Filesize and checksum are calculated and stored in the archive.
   * MimeType and orginalFilename are sent to the archive to be stored.
   
!***> '''Case 1'''
Show file structure before storing a new record
!define expectedRegexpArchive {}
!include -seamless .HelperPages.readFileSystem

!define createFitnesseRecord {!-{"name":"fitnesseExample","children":[{"name":"recordInfo","children":[{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"fitnesseValidationType"}]}]},{"name":"fitnesseTextVar","value":"myRecordInArchive"}]}-!}

!define recordType {fitnesseRecordType}
!define createData createFitnesseRecord
!define expectedAnswer {}
!define expectedUploadAnswer {}
!define expectedCreateResult {CREATED}
!define archiveFileName {testSystem:fitnesseRecordType:$tmpRecordId1}
!define archiveVersion1 {v1}
!define archiveVersion2 {v1}


!***> Create record, for recordType ${recordType}

!| ChildComparerFixture |
| authToken | type | json | testCreateAndStoreRecord? | getStatusType? | getCreatedId? |
| ${currentAuthToken} | ${recordType} | ${createData} | ${expectedAnswer} | ${expectedCreateResult} | $tmpRecordId1= |

!define expectedAnswer {}
!define recordId {$createdRecordId}
*!

!include -seamless .HelperPages.showFileVersion

Show file structure after storing a new record
!define expectedRegexpArchive {=~/$tmpRecordId1/}
!include -seamless .HelperPages.readFileSystem

show that file exists as v1 but not v2 after create
!| script | FileReader |
| ensure | file name | testSystem:fitnesseRecordType:$tmpRecordId1 | exists in archive as version | v1 | under path | ${archiveFileSystemPath} |
| reject | file name | testSystem:fitnesseRecordType:$tmpRecordId1 | exists in archive as version | v2 | under path | ${archiveFileSystemPath} |


*!
!***> '''Case 2'''

!define originalFileName {aText.txt}
!define expectedChecksumSha512 {5ee3dbf5b81474c1fb73ac49b389ba6d445f672d82abbdc865defced83b09b6aa811790966eb4fcf33d74799d22e9849f6b1ab99d74673d7207ec5f35af54bac}
!define expectedMimeType {text/plain}
!define expectedFileSize {28}

!define createBinaryGeneric {!-{"name":"binary","children":[{"name":"recordInfo","children":[{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"systemOne"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"genericBinary"}]}]},{"name":"adminInfo","children":[{"name":"visibility","value":"unpublished"}]},{"name":"originalFileName","value":"-!${originalFileName}!-"},{"name":"expectedFileSize","value":"-!${expectedFileSize}!-"}],"attributes":{"type":"generic"}}-!}
!define recordType {binary}
!define createData createBinaryGeneric
!define expectedAnswer {}
!define expectedCreateResult {CREATED}

!define archiveFileName {systemOne:binary:$tmpRecordId2-master}
!define archiveVersion1 {v1}
!define archiveVersion2 {v1}

!***> Create record, for recordType ${recordType}

!| ChildComparerFixture |
| authToken | type | json | testCreateAndStoreRecord? | getStatusType? | getCreatedId? |
| ${currentAuthToken} | ${recordType} | ${createData} | ${expectedAnswer} | ${expectedCreateResult} | $tmpRecordId2= |

!define expectedAnswer {}
!define recordId {$createdRecordId}
*!
show that file exists as v1 but not v2 after create, and no uploaded master
!| script | FileReader |
| ensure | file name | systemOne:binary:$tmpRecordId2 | exists in archive as version | v1 | under path | ${archiveFileSystemPath} |
| reject | file name | systemOne:binary:$tmpRecordId2 | exists in archive as version | v2 | under path | ${archiveFileSystemPath} |
| reject | file name | systemOne:binary:$tmpRecordId2-master | exists in archive as version | v1 | under path | ${archiveFileSystemPath} |

!define uploadRecordId {$tmpRecordId2}
!include -seamless .HelperPages.uploadResource

Show file structure after storing a new record
!define expectedRegexpArchive {=~/$tmpRecordId2/}
!include -seamless .HelperPages.readFileSystem

show that file exists as v1, v2 but not v3 after upload, and uploaded master
!| script | FileReader |
| ensure | file name | systemOne:binary:$tmpRecordId2 | exists in archive as version | v1 | under path | ${archiveFileSystemPath} |
| ensure | file name | systemOne:binary:$tmpRecordId2 | exists in archive as version | v2 | under path | ${archiveFileSystemPath} |
| reject | file name | systemOne:binary:$tmpRecordId2 | exists in archive as version | v3 | under path | ${archiveFileSystemPath} |
| ensure | file name | systemOne:binary:$tmpRecordId2-master | exists in archive as version | v1 | under path | ${archiveFileSystemPath} |


!***> Validate metadata has been stored in the Archive
Validate that:
 * Filesize and checksum are calculated and stored in the archive.
 * MimeType and orginalFilename are sent to the archive to be stored.

	
| Table:smartrics.rest.fitnesse.fixture.RestFixture | http://systemone-fedora:8080/fcrepo/rest/ |
| setHeaders | Accept: !-application/ld+json-! |
| GET | /systemOne:binary:$tmpRecordId2-master/fcr:metadata | 200 | | |
| let | varname | js | response.body.match(/ebucore#filename":\[{"@value":"([\w.]*)"}\]/)[0] |ebucore#filename":[{"@value":"${originalFileName}"}]|
| let | varname | js | response.body.match(/ebucore#hasMimeType":\[{"@value":"[\w/]*"}\]/)[0] |ebucore#hasMimeType":[{"@value":"${expectedMimeType}"}]|
| let | varname | js | response.body.match(/urn:sha-512:[\w\d]*/)[0] |urn:sha-512:${expectedChecksumSha512}|
| let | varname | js | response.body.match(/hasSize":\[{"@value":"\d*"/)[0] |hasSize":[{"@value":"${expectedFileSize}"|
*!
*!
