---
Test
---
!1 Unique
!2 What is it?
Unique is a metadata functionality that makes it possible to configure one or more fields within a record type to only accept unique values. Actions such as create, update and validate where there are any conflicting data in these fields
would be denied with a response about the conflicting fields. This feature can be configured in a number of different ways where some are as described in the examples below:

 * '''A single unique field'''
  * ''A unique with a uniqueTerm. This would mean that only the field configured with a unique would require unique values and all the others would accept already existing values.''
 * '''Multiple unique fields'''
  * ''Multiple uniques with a uniqueTerm each. When setting multiple fields as uniques it would be considered a conflict if any combination of these already exists.''
 * '''A unique field with combines'''
  * ''A unique with a uniqueTerm plus one or more combineTerms. These work together to create '''a unique combination of values''' with the uniqueTerm as the domain the combineTerms are related to.''
  * ''Please note that this means that the combines are only relevant if the unique field value also exist. See combination chart below for examples:''
  * !img files/Images/uniqueCombinationChart.png
 * '''Multiple unique fields with combines'''
  * ''Multiple unique fields with a combination of uniqueTerm and combineTerm(s).''

!2 How does it work?
!3 Metadata definition of unique
!***< Set up unique definition
!define uniqueDefinition {!-unique (group)
	uniqueTerm (recordLink, 1-1, noConstraint)
	combineTerm (recordLink, 0-X, noConstraint)-!}
*!
{{{
${uniqueDefinition}
}}}
 * '''Unique''': A group consisting of a uniqueTerm (''and optional combineTerms'') that define the rule(s) for a unique. This group needs to be added to a recordType in order to utilize this functionality.
 * '''UniqueTerm''': A reference to a collectStorageTerm that will act like a filter when detecting conflicts for the value of a field. This is the base rule for the ''unique'' filter.
 * '''CombineTerm''': This is (just like uniqueTerm) also a reference to a colleceStorageTerm and also works as a filter. These can be used as additional rule(s) in combination with a uniqueTerm to create a combination of values to consider as unique.

 * '''Definition text for unique:'''
  * You can define unique fields within a recordType by adding a unique group to it. This unique group requires a unique term, which specifies the field that must be unique. Alternatively, you can further refine the unique term by linking it to additional fields. For example, you could define a userId as unique within a user recordType and use combineTerms to include restrictions based on domain.
  * The base of this functionality relies on the concept of collectStorageTerms that act like a filter to detect any conflicts for the value of a field. These storage terms are what we reference in both uniqueTerms and combineTerms.
  * !style_meta[Important:] StorageTerms linked in both uniqueTerm and combineTerm must be specified in the recordType definition and in the validationType definition for "new" and "update".

!***> How to set up unique and its terms:
!include -seamless .CoraTests.CallThroughJavaCode.BuiltInMetadata.BuiltInMetadataFunctionality.Unique.SettingUpUnique
*!
----
!include -seamless .CoraTests.CallThroughJavaCode.BuiltInMetadata.BuiltInMetadataFunctionality.Unique.UniqueTests