---
Static
---
!2 Unique tests

!4 Definition test
 * '''Case 1''': The definition must be correct for unique

!4 Scenario 1 tests (single unique field)
 * '''Create'''
  * '''Case 1a''': It must be possible to create a record with data in a unique field
  * '''Case 1b''': It must not be possible to create a record with conflicting data in the unique field
  
 * '''Update'''
  * '''Case 2a''': It must be possible to update the value of a unique field
  * '''Case 2b''': It must not be possible to update the value of a unique field to a value used by another record
  * '''Case 2c''': It must be possible to update the value of a field that is not unique in a record with unique fields
  
 * '''Validate'''
  * ''Create''  
   * '''Case 3a''': If validating creation of a record with a unique value, its expected to pass
   * '''Case 3b''': If validating creation of a record with a conflicting unique value, its expected to fail
  * ''Update'' 
   * '''Case 3c''': If validating update of a record with a unique value, its expected to pass
   * '''Case 3d''': If validating update of a record with a conflicting unique value, its expected to fail
  
!4 Scenario 2 tests (multiple unique fields)
 * '''Create'''
  * '''Case 4a''': It must be possible to create a record with unique values as data the unique fields
  * '''Case 4b''': It must not be possible to create a record with conflicting data in one (first) of the unique fields
  * '''Case 4c''': It must not be possible to create a record with conflicting data in one (last) of the unique fields
  * '''Case 4d''': It must not be possible to create a record with both values being conflicting data of the unique fields
  
 * '''Update'''
  * '''Case 5a''': It must not be possible to update both values in a unique fields to a values used by another record
  * '''Case 5b''': It must be possible to update the values of a the unique fields.
  * '''Case 5c''': It must be possible to update the value of a field that is not unique in a record with multiple unique fields
  * '''Case 5d''': It must not be possible to update one (the first) of the unique values to a duplicate already used by another record
  * '''Case 5e''': It must not be possible to update one (the last) of the unique values to a duplicate already used by another record
  
 * '''Validate'''
  * ''Create''  
   * '''Case 6a''': If validating creation of a record with unique values, its expected to pass
   * '''Case 6b''': If validating creation of a record with conflicting data in one (first) of the unique fields, its expected to fail
   * '''Case 6c''': If validating creation of a record with conflicting data in one (last) of the unique fields, its expected to fail
   * '''Case 6d''': If validating creation of a record with both values being conflicting data of the unique fields, its expected to fail
  * ''Update'' 
   * '''Case 6e''': If validating update of a record with unique values, its expected to pass
   * '''Case 6f''': If validating update of a record with (the first) of the unique values to a duplicate already used by another record, its expected to fail
   * '''Case 6g''': If validating update of a record with (the second) of the unique values to a duplicate already used by another record, its expected to fail
   * '''Case 6h''': If validating update of a record with both of the unique values to a duplicate already used by another record, its expected to fail
  
!4 Scenario 3 tests (unique field with combines)
 * '''Create'''
  * '''Case 7a''': It must be possible to create a record with unique values as data in fields for unique and the combines (U, A, B)
  * '''Case 7b''': It must not be possible to create a record with a conflicting unique combine (U, A, B)
  * '''Case 7c''': It must be possible to create a record with one of the combines as different (A)
  * '''Case 7d''': It must be possible to create a record with one of the combines as different (B) 
  * '''Case 7e''': It must be possible to create a record with both one of the combines as different (A, B)
  * '''Case 7f''': It must be possible to create a record without the unique field but conflicting combines (A, B)
  
 * '''Update'''
  * '''Case 8a''': It must not be possible to update a set of values (U, A, B) to a conflicting set of values used by another record
  * '''Case 8b''': It must be possible to update a record with a unique value for U and conflicting values for A and B
  * '''Case 8c''': It must be possible to update a record with a unique value for A and conflicting values for U and B
  * '''Case 8d''': It must be possible to update a record with a unique value for B and conflicting values for U and A
  * '''Case 8e''': It must be possible to update a record with a unique value for U and A and a conflicting value for B
  * '''Case 8f''': It must be possible to update a record with a unique value for U and B and a conflicting value for A
  * '''Case 8g''': It must be possible to update all values (U, A, B) of the unique values not used by another record
  
 * '''Validate'''
  * ''Create'' 
   * '''Case 9a''': If validating creation of a record with all fields being unique (U, A, B), its expected to pass
   * '''Case 9b''': If validating creation of a record with all fields being in conflict (U, A, B), its expected to fail
   * '''Case 9c''': If validating creation a record with one of the combines as different (A), its expected to pass
   * '''Case 9d''': If validating creation a record with one of the combines as different (B), its expected to pass
   * '''Case 9e''': If validating creation a record with both one of the combines as different (A, B), its expected to pass
   * '''Case 9f''': If validating creation a record without the unique field but conflicting combines (A, B), its expected to pass
  * ''Update'' 
   * '''Case 9g''': If validating update of a record to conflicting values (U, A, B) used by another record, its expected to fail
   * '''Case 9h''': If validating update of a record with a unique value for U and conflicting values for A and B, its expected to pass
   * '''Case 9i''': If validating update of a record with a unique value for A and conflicting values for U and B, its expected to pass
   * '''Case 9j''': If validating update of a record with a unique value for B and conflicting values for U and A, its expected to pass
   * '''Case 9k''': If validating update of a record with a unique value for U and A and a conflicting value for B, its expected to pass
   * '''Case 9l''': If validating update of a record with a unique value for U and B and a conflicting value for A, its expected to pass
   * '''Case 9m''': If validating update of all values of a record (U, A, B) with unique values not used by another record, its expected to pass
  
!4 Scenario 4 tests (multiple unique field with combines)
 * '''Create'''
  * '''Case 10a''': It must be possible to create a record with unique values as data in fields for unique and the combines
  * '''Case 10b''': It must not be possible to create a record with if all unique combines are conflicting  (U1, A1, U2, A2)
  * '''Case 10c''': It must be not possible to create a record with one of the unique combines as conflicting (U1, A1)
  * '''Case 10d''': It must be not possible to create a record with one of the unique combines as conflicting (U2, A2)
  * '''Case 10e''': It must be possible to create a record with both uniques (U1, U2) as unique values and the combines (A1, A2) as conflicting values

 * '''Update'''
  * '''Case 11a''': It must not be possible to update values of the unique and its combines (U1, A1, U2, A2) to conflicting unique combines used by another record
  * '''Case 11b''': It must be possible to update a record with unique values for the uniques (U1 and U2) and conflicting values for the combines (A1 and A2)
  * '''Case 11c''': It must not be possible to update a record with a unique combine (U1 and A1) but conflicting for another unique combine (U2 and A2)
  * '''Case 11d''': It must not be possible to update a record with a unique combine (U2 and A2) but conflicting for another unique combine (U1 and A1)
  * '''Case 11e''': It must be possible to update a record with unique combination values for both unique combines (U1, A1 and U2, A2)

 * '''Validate'''
  * ''Create''
   * '''Case 12a''': If validating creation of a record when all unique combine combinations (U1, A1 & U2 and A2) already exists, its expected to fail
   * '''Case 12b''': If validating creation of a record with all fields being unique combination (U1, A1 & U2 and A2) that does not exist, its expected to pass
   * '''Case 12c''': If validating creation of a record with where both uniques (U1, U2) are unique values and combines (A1, A2) already exists, its expected to pass
   * '''Case 12d''': If validating creation of a record with where one unique combine already exists (U1, A1) and the other (U2, A2) is not existing, its expected to fail
   * '''Case 12e''': If validating creation of a record with where one unique combine already exists (U2, A2) and the other (U1, A1) is not existing, its expected to fail
  * ''Update'' 
   * '''Case 12f''': If validating update of a record to conflicting unique combine values (U1, A1 & U2, A2) used by another record, its expected to fail
   * '''Case 12g''': If validating update of a record to unique combine values that does not exist (U1, A1 & U2, A2), its expected to pass
   * '''Case 12h''': If validating update of a record to unique values that does not exist (U1, U2) and combine values (A1, A2) that does exist, its expected to pass
   * '''Case 12i''': If validating update of a record with a unique combine that exists (U1, A1) and one that does not exist (U2, A2), its expected to fail
   * '''Case 12j''': If validating update of a record with a unique combine that exists (U2, A2) and one that does not exist (U1, A1), its expected to fail
  
##### NOTE Regarding the tests and scenarios ##### 
##### Each scenario also clean up its created records to avoid any unexpected conflicts for the test cases

!***> Setup metadata needed for tests (create storageTerms, add key filters)
!***> Create CollectStorageTerms (fitnesseTextVarStorageTerm, fitnesseAnotherTextVarStorageTerm, fitnesseNumberVarStorageTerm, fitnesseOnlyOneMetadataTextVarStorageTerm)
!define fitnesseTextVarStorageTerm {!-{"name":"collectStorageTerm","children":[{"name":"recordInfo","children":[{"name":"id","value":"fitnesseTextVarStorageTerm"},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"collectStorageTerm"}]},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"cora"}]}]},{"name":"extraData","children":[{"name":"storageKey","value":"fitnesseTextVar"}]}],"attributes":{"type":"storage"}}-!}
!define fitnesseAnotherTextVarStorageTerm {!-{"name":"collectStorageTerm","children":[{"name":"recordInfo","children":[{"name":"id","value":"fitnesseAnotherTextVarStorageTerm"},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"collectStorageTerm"}]},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"cora"}]}]},{"name":"extraData","children":[{"name":"storageKey","value":"fitnesseAnotherTextVar"}]}],"attributes":{"type":"storage"}}-!}
!define fitnesseNumberVarStorageTerm {!-{"name":"collectStorageTerm","children":[{"name":"recordInfo","children":[{"name":"id","value":"fitnesseNumberVarStorageTerm"},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"collectStorageTerm"}]},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"cora"}]}]},{"name":"extraData","children":[{"name":"storageKey","value":"fitnesseNumberVar"}]}],"attributes":{"type":"storage"}}-!}
!define fitnesseOnlyOneMetadataTextVarStorageTerm {!-{"name":"collectStorageTerm","children":[{"name":"recordInfo","children":[{"name":"id","value":"fitnesseOnlyOneMetadataTextVarStorageTerm"},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"collectStorageTerm"}]},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"cora"}]}]},{"name":"extraData","children":[{"name":"storageKey","value":"fitnesseOnlyOneMetadataTextVar"}]}],"attributes":{"type":"storage"}}-!}
!| Table:smartrics.rest.fitnesse.fixture.RestFixture|${systemUnderTestUrl}rest/    |
| setHeader | Accept:application/vnd.cora.record+json!-
-!Content-Type:application/vnd.cora.recordgroup+json!-
-!authToken:$adminAuthToken |
| setBody | ${fitnesseTextVarStorageTerm} |
| POST | /record/collectTerm | 201 | | |
| setBody | ${fitnesseAnotherTextVarStorageTerm} |
| POST | /record/collectTerm | 201 | | |
| setBody | ${fitnesseNumberVarStorageTerm} |
| POST | /record/collectTerm | 201 | | |
| setBody | ${fitnesseOnlyOneMetadataTextVarStorageTerm} |
| POST | /record/collectTerm | 201 | | |
*!
!***> Add the created storageTerms to some fields (fitnesseTextVar, fitnesseAnotherTextVar, fitnesseNumberVar and fitnesseOnlyOneMetadataTextVar)
!define fitnesseGroupWithAddedFilterKeys {!-{"name":"metadata","children":[{"name":"recordInfo","children":[{"name":"id","value":"fitnesseGroup"},{"name":"ignoreOverwriteProtection","value":"true"},{"name":"type","children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"metadata"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"metadataGroup"}]},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}]},{"name":"createdBy","children":[{"name":"linkedRecordType","value":"user"},{"name":"linkedRecordId","value":"131313"}]},{"name":"tsCreated","value":"2024-09-03T12:06:54.365492Z"},{"name":"updated","repeatId":"0","children":[{"name":"updatedBy","children":[{"name":"linkedRecordType","value":"user"},{"name":"linkedRecordId","value":"131313"}]},{"name":"tsUpdated","value":"2024-09-03T12:06:54.365492Z"}]}]},{"name":"nameInData","value":"fitnesseExample"},{"name":"textId","children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"fitnesseText"}]},{"name":"defTextId","children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"fitnesseText"}]},{"name":"childReferences","children":[{"name":"childReference","repeatId":"0","children":[{"name":"repeatMin","value":"1"},{"name":"repeatMax","value":"1"},{"name":"ref","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"exampleRecordInfoGroup"}]}]},{"name":"childReference","repeatId":"1","children":[{"name":"repeatMin","value":"0"},{"name":"repeatMax","value":"20"},{"name":"ref","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"fitnesseMetadataTextVar"}]},{"name":"childRefCollectTerm","children":[{"name":"linkedRecordType","value":"collectTerm"},{"name":"linkedRecordId","value":"fitnesseTextVarStorageTerm"}],"attributes":{"type":"storage"}}]},{"name":"childReference","repeatId":"7","children":[{"name":"repeatMin","value":"0"},{"name":"repeatMax","value":"20"},{"name":"ref","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"fitnesseAnotherMetadataTextVar"}]},{"name":"childRefCollectTerm","children":[{"name":"linkedRecordType","value":"collectTerm"},{"name":"linkedRecordId","value":"fitnesseAnotherTextVarStorageTerm"}],"attributes":{"type":"storage"}}]},{"name":"childReference","repeatId":"2","children":[{"name":"repeatMin","value":"0"},{"name":"repeatMax","value":"X"},{"name":"ref","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"fitnesseMetadataNumberVar"}]},{"name":"childRefCollectTerm","children":[{"name":"linkedRecordType","value":"collectTerm"},{"name":"linkedRecordId","value":"fitnesseNumberVarStorageTerm"}],"attributes":{"type":"storage"}}]},{"name":"childReference","repeatId":"3","children":[{"name":"repeatMin","value":"0"},{"name":"repeatMax","value":"1"},{"name":"ref","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"fitnesseCollectionVar"}]}]},{"name":"childReference","repeatId":"4","children":[{"name":"repeatMin","value":"0"},{"name":"repeatMax","value":"1"},{"name":"ref","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"fitnesseLink"}]}]},{"name":"childReference","repeatId":"5","children":[{"name":"repeatMin","value":"0"},{"name":"repeatMax","value":"1"},{"name":"ref","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"fitnesseBinaryLink"}]}]},{"name":"childReference","repeatId":"6","children":[{"name":"repeatMin","value":"0"},{"name":"repeatMax","value":"1"},{"name":"ref","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"fitnesseOnlyOneMetadataTextVar"}]},{"name":"childRefCollectTerm","children":[{"name":"linkedRecordType","value":"collectTerm"},{"name":"linkedRecordId","value":"fitnesseOnlyOneMetadataTextVarStorageTerm"}],"attributes":{"type":"storage"}}]}]}],"attributes":{"type":"group"}}-!}
!| Table:smartrics.rest.fitnesse.fixture.RestFixture|${systemUnderTestUrl}rest/    |
| setHeader | Accept:application/vnd.cora.record+json!-
-!Content-Type:application/vnd.cora.recordgroup+json!-
-!authToken:$adminAuthToken |
| setBody | ${fitnesseGroupWithAddedFilterKeys} |
| POST | /record/metadata/fitnesseGroup | 200 | | |
*!
*!

!include -seamless .CoraTests.CallThroughJavaCode.BuiltInMetadata.BuiltInMetadataFunctionality.Unique.UniqueDefinition
!include -seamless .CoraTests.CallThroughJavaCode.BuiltInMetadata.BuiltInMetadataFunctionality.Unique.UniqueTestsScenario1
!include -seamless .CoraTests.CallThroughJavaCode.BuiltInMetadata.BuiltInMetadataFunctionality.Unique.UniqueTestsScenario2
!include -seamless .CoraTests.CallThroughJavaCode.BuiltInMetadata.BuiltInMetadataFunctionality.Unique.UniqueTestsScenario3
!include -seamless .CoraTests.CallThroughJavaCode.BuiltInMetadata.BuiltInMetadataFunctionality.Unique.UniqueTestsScenario4
--------
!***> Clean up data from tests
!***> Remove unique (fitnesseTextVarStorageTerm) from fitnesseRecordType
!define fitnesseRecordTypeWithoutfitnesseTextVarStorageTerm {!-{"name":"recordType","children":[{"name":"recordInfo","children":[{"name":"id","value":"fitnesseRecordType"},{"name":"ignoreOverwriteProtection","value":"true"},{"name":"type","children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"recordType"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"recordType"}]},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}]},{"name":"createdBy","children":[{"name":"linkedRecordType","value":"user"},{"name":"linkedRecordId","value":"131313"}]},{"name":"tsCreated","value":"2024-09-03T12:06:55.934541Z"},{"name":"updated","repeatId":"0","children":[{"name":"updatedBy","children":[{"name":"linkedRecordType","value":"user"},{"name":"linkedRecordId","value":"131313"}]},{"name":"tsUpdated","value":"2024-09-03T12:06:55.934541Z"}]},{"name":"updated","repeatId":"1","children":[{"name":"updatedBy","children":[{"name":"linkedRecordType","value":"user"},{"name":"linkedRecordId","value":"141414"}]},{"name":"tsUpdated","value":"2024-09-03T12:16:20.446366Z"}]}]},{"name":"metadataId","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"fitnesseGroup"}]},{"name":"presentationViewId","children":[{"name":"linkedRecordType","value":"presentation"},{"name":"linkedRecordId","value":"fitnessePGroup"}]},{"name":"menuPresentationViewId","children":[{"name":"linkedRecordType","value":"presentation"},{"name":"linkedRecordId","value":"fitnessePGroup"}]},{"name":"listPresentationViewId","children":[{"name":"linkedRecordType","value":"presentation"},{"name":"linkedRecordId","value":"fitnessePGroup"}]},{"name":"idSource","value":"timestamp"},{"name":"textId","children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"fitnesseText"}]},{"name":"defTextId","children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"fitnesseText"}]},{"name":"autocompletePresentationView","children":[{"name":"linkedRecordType","value":"presentation"},{"name":"linkedRecordId","value":"fitnessePGroup"}]},{"name":"groupOfRecordType","repeatId":"0","value":"metadata"},{"name":"public","value":"true"},{"name":"storeInArchive","value":"true"},{"name":"usePermissionUnit","value":"false"},{"name":"useTrashBin","value":"false"},{"name":"useVisibility","value":"false"}]}-!}
!| Table:smartrics.rest.fitnesse.fixture.RestFixture|${systemUnderTestUrl}rest/    |
| setHeader | Accept:application/vnd.cora.record+json!-
-!Content-Type:application/vnd.cora.recordgroup+json!-
-!authToken:$adminAuthToken |
| setBody | ${fitnesseRecordTypeWithoutfitnesseTextVarStorageTerm} |
| POST | /record/recordType/fitnesseRecordType | 200 | | |
*!
!***> Restore fitnesseGroup
#!define fitnesseGroupWithoutStorageTerm {!-{"name":"metadata","children":[{"name":"recordInfo","children":[{"name":"id","value":"fitnesseGroup"},{"name":"ignoreOverwriteProtection","value":"true"},{"name":"type","children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"metadata"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"metadataGroup"}]},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}]},{"name":"createdBy","children":[{"name":"linkedRecordType","value":"user"},{"name":"linkedRecordId","value":"131313"}]},{"name":"tsCreated","value":"2024-09-03T12:06:54.365492Z"},{"name":"updated","repeatId":"0","children":[{"name":"updatedBy","children":[{"name":"linkedRecordType","value":"user"},{"name":"linkedRecordId","value":"131313"}]},{"name":"tsUpdated","value":"2024-09-03T12:06:54.365492Z"}]},{"name":"updated","repeatId":"1","children":[{"name":"updatedBy","children":[{"name":"linkedRecordType","value":"user"},{"name":"linkedRecordId","value":"141414"}]},{"name":"tsUpdated","value":"2024-09-03T12:12:56.019809Z"}]}]},{"name":"nameInData","value":"fitnesseExample"},{"name":"textId","children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"fitnesseText"}]},{"name":"defTextId","children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"fitnesseText"}]},{"name":"childReferences","children":[{"name":"childReference","repeatId":"0","children":[{"name":"repeatMin","value":"1"},{"name":"repeatMax","value":"1"},{"name":"ref","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"exampleRecordInfoGroup"}]}]},{"name":"childReference","repeatId":"1","children":[{"name":"repeatMin","value":"0"},{"name":"repeatMax","value":"20"},{"name":"ref","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"fitnesseMetadataTextVar"}]}]},{"name":"childReference","repeatId":"2","children":[{"name":"repeatMin","value":"0"},{"name":"repeatMax","value":"X"},{"name":"ref","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"fitnesseMetadataNumberVar"}]}]},{"name":"childReference","repeatId":"3","children":[{"name":"repeatMin","value":"0"},{"name":"repeatMax","value":"1"},{"name":"ref","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"fitnesseCollectionVar"}]}]},{"name":"childReference","repeatId":"4","children":[{"name":"repeatMin","value":"0"},{"name":"repeatMax","value":"1"},{"name":"ref","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"fitnesseLink"}]}]},{"name":"childReference","repeatId":"5","children":[{"name":"repeatMin","value":"0"},{"name":"repeatMax","value":"1"},{"name":"ref","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"fitnesseBinaryLink"}]}]},{"name":"childReference","repeatId":"6","children":[{"name":"repeatMin","value":"0"},{"name":"repeatMax","value":"1"},{"name":"ref","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"fitnesseOnlyOneMetadataTextVar"}]}]}]}],"attributes":{"type":"group"}}-!}
!| Table:smartrics.rest.fitnesse.fixture.RestFixture|${systemUnderTestUrl}rest/    |
| setHeader | Accept:application/vnd.cora.record+json!-
-!Content-Type:application/vnd.cora.recordgroup+json!-
-!authToken:$adminAuthToken |
| setBody | ${FITNESSE_GROUP_UPDATE} |
| POST | /record/metadata/fitnesseGroup | 200 | | |
*!
!***> Delete the fitnesse StorageTerms for uniques
!| RecordEndpointFixture |
| authToken | type | id | testDeleteRecord? | getStatusType? |
| $adminAuthToken | collectTerm | fitnesseTextVarStorageTerm | | OK |
| $adminAuthToken | collectTerm | fitnesseAnotherTextVarStorageTerm | | OK |
| $adminAuthToken | collectTerm | fitnesseNumberVarStorageTerm | | OK |
| $adminAuthToken | collectTerm | fitnesseOnlyOneMetadataTextVarStorageTerm | | OK |

*!
*!