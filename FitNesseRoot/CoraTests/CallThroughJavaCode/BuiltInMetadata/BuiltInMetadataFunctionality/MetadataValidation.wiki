---
Test
---
----
!1 Metadata validation
It is possible to validate a record prior to creating or updating it. A work order is used to validate the record, which is sent as payload using !style_pass(POST) to '''${systemUnderTestUrl}record/workOrder'''

!3 Work order
The work order contains two parts:

 * the first one, named '''order''' contains a '''validationOrder'''.
 * the second one, named '''record''' is where the record to validate is placed. In order to be able to validate only the data inside the '''record/data''' should be placed in the field '''record'''.

Example of a workOrder in json format
{{{
{ 
  "order": {validation order},
  "record": {record to validate}
}
}}}

!***> Example of a workOrder in xml format
{{{
<workOrder>
	<order>{validation order}</order>
	<record>{record to validate}</record>
</workOrder>
}}}
*!

!3 Validation order
Validation order contains information about what record type we want to validate, using the field '''recordType''', what metadata we want to validate for (new or existing), using the field '''metadataToValidate''' and if we want to validate that the links in the data exist, using the field '''validateLinks'''.

Example validationOrder as json.
{{{
{
  "name": "validationOrder",
  "children": [
    {
      "name": "recordInfo",
      "children": [
        {
          "name": "dataDivider",
          "children": [
            {"name": "linkedRecordType", "value": "system"    },
            {"name": "linkedRecordId"  , "value": "testSystem"}
          ]
        },
        {
          "name": "validationType",
          "children": [
            {"name": "linkedRecordType", "value": "validationType" },
            {"name": "linkedRecordId"  , "value": "validationOrder"}
          ]
        }
      ]
    },
    {
      "name": "recordType",
      "children": [
        {"name": "linkedRecordType", "value": "recordType"}                   ,
        {"name": "linkedRecordId", "value": "record type to validate against"}
      ]
    },
    {"name": "validateLinks", "value": "true || false"},
    {"name": "metadataToValidate", "value": "new || existing"}
  ]
}
}}}

!***> Example of validationOrder as xml
{{{
<validationOrder>
	<recordInfo>
		<dataDivider>
			<linkedRecordType>system</linkedRecordType>
			<linkedRecordId>testSystem</linkedRecordId>
		</dataDivider>
		<validationType>
			<linkedRecordType>validationType</linkedRecordType>
			<linkedRecordId>validationOrder</linkedRecordId>
		</validationType>
	</recordInfo>
	<recordType>
		<linkedRecordType>recordType</linkedRecordType>
		<linkedRecordId>record type to validate against</linkedRecordId>
	</recordType>
	<validateLinks>true || false</validateLinks>
	<metadataToValidate>new || existing</metadataToValidate>
</validationOrder>
}}}
*!

!3 Validation result
Once the validation is finished a '''validationResult''' is returned. This is a record containing the result from the validation where detailed information about each mismatch, if any, are included in the record. The field '''valid''' indicates if the record is valid or not.

Example of validationResult below as json.
{{{
{
  "record": {
    "data": {
      "children": [
        {
          "children": [
            {"name": "id", "value": "validationOrder:6460365596677"},
            {
              "children": [
                {"name": "linkedRecordType", "value": "recordType"     },
                {"name": "linkedRecordId"  , "value": "validationOrder"}
              ],
              "name": "type"
            }
          ],
          "name": "recordInfo"
        },
        {
          "children": [
            {
              "repeatId": "0"                                             ,
              "name"    : "errorMessage"                                  ,
              "value"   : "No record exists with recordId: studentThesis1"
            },
            {
              "repeatId": "1",
              "name": "errorMessage",
              "value": "Did not find enough data children with referenceId: recordTypeLink(with nameInData:type)."
            }
          ],
          "name": "errorMessages"
        },
        {"name": "valid", "value": "true || false"}
      ],
      "name": "validationResult"
    }
  }
}
}}}

!***> Example of a validationResult as xml
{{{
<?xml version="1.0" encoding="UTF-8"?>
<record>
    <data>
        <validationResult>
            <recordInfo>
                <id>validationOrder:1218302590797777</id>
                <type>
                    <linkedRecordType>recordType</linkedRecordType>
                    <linkedRecordId>validationOrder</linkedRecordId>
                </type>
                <createdBy>
                    <linkedRecordType>user</linkedRecordType>
                    <linkedRecordId>someUser</linkedRecordId>
                </createdBy>
                <tsCreated>2024-06-13T12:05:47.329715Z</tsCreated>
                <updated repeatId="0">
                    <updatedBy>
                        <linkedRecordType>user</linkedRecordType>
                        <linkedRecordId>someUser</linkedRecordId>
                    </updatedBy>
                    <tsUpdated>2024-06-13T12:05:47.329715Z</tsUpdated>
                </updated>
            </recordInfo>
            <errorMessages>
                <errorMessage repeatId="0">Did not find enough data children with referenceId: createdByLink(with nameInData:createdBy).</errorMessage>
            </errorMessages>
            <valid>false</valid>
        </validationResult>
    </data>
    <actionLinks>
        <read>
            <requestMethod>GET</requestMethod>
            <rel>read</rel>
            <url>http://somesystem:8080/somewhere/rest/record/validationOrder/validationOrder:1218302590797777</url>
            <accept>application/vnd.cora.record+xml</accept>
        </read>
    </actionLinks>
</record>
}}}
*!

!2 Test cases
Validation must be able to offer the possiblity to validate records for both actions when creating and updating. Both json and xml are accepeted.

 * '''Case 1: ''' A record containing all required data for creation should validate as true.
 * '''Case 2: ''' A record containing missing data should validate as false.
 * '''Case 3a: ''' A record containing all required data for update but the referred record does not exist in the system should validate as false.
 * '''Case 3b: ''' A record containing all required data for update and the referred record exists in the system should validate as true.
 * '''Case 4a: ''' A record containing all required data for creation should validate as true using '''xml'''.
 * '''Case 4b: ''' A record containing missing data should validate as false, using '''xml'''.
 * '''Case 5: ''' The workOrder must contain one validationOrder and one recordToValidate
 * '''Case 5a: ''' A record with a missing validationOrder should cause bad request, using '''xml'''.
 * '''Case 5b: ''' A record with a missing record should cause bad request, using '''xml'''.
 * '''Case 5c: ''' A record containing multiple validationOrders should cause bad request, using '''xml'''.
 * '''Case 5d: ''' A record containing multiple records should cause bad request, using '''xml'''.
 * '''Case 6a: ''' A recordType of record that does not match the recordType specified in the validationOrder should validate as false, using '''json'''.
 * '''Case 6b: ''' A recordType of record that does not match the recordType specified in the validationOrder should validate as false, using '''xml'''.
 * '''Case 7a: ''' When validationOrder is set to validate links, a record with an existing recordlink should validate as true
 * '''Case 7b: ''' When validationOrder is set to validate links, a record with an non-existing recordlink should validate as false
 * '''Case 7c: ''' When validationOrder is set to NOT validate links, a record with a non-existing recordlink should validate as true
 
!***> Prepare tests: Create recordType testStudentThesis and metadata that is needed

!***> Create metadataTextVariable testTitleTextVar and collectionVariable testPublishedStatus

!| RecordEndpointFixture |
| authToken | type | json | testCreateRecord? | getStatusType? |
| $adminAuthToken | text | {"children":[{"children":[{"name":"id","value":"someFitnesseText"},{"children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}],"name":"dataDivider"},{"children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"coraText"}],"name":"validationType"}],"name":"recordInfo"},{"children":[{"name":"text","value":"Some  fitnesse text"}],"name":"textPart","attributes":{"type":"default","lang":"sv"}}],"name":"text"} | | CREATED |
| $adminAuthToken | text | {"children":[{"children":[{"name":"id","value":"someFitnesseDefText"},{"children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}],"name":"dataDivider"},{"children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"coraText"}],"name":"validationType"}],"name":"recordInfo"},{"children":[{"name":"text","value":"Some  fitnesse text"}],"name":"textPart","attributes":{"type":"default","lang":"sv"}}],"name":"text"} | | CREATED |
| $adminAuthToken | metadata | {"children":[{"children":[{"name":"id","value":"testTitleTextVar"},{"children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}],"name":"dataDivider"},{"children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"metadataTextVariable"}],"name":"validationType"}],"name":"recordInfo"},{"name":"nameInData","value":"testTitle"},{"name":"regEx","value":"(^[0-9A-Za-z:-_\\s]{2,50}$)"},{"children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"someFitnesseText"}],"name":"textId"},{"children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"someFitnesseDefText"}],"name":"defTextId"}],"name":"metadata","attributes":{"type":"textVariable"}} | | CREATED |
| $adminAuthToken | metadata | {"children":[{"children":[{"name":"id","value":"testPublishedItem"},{"children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}],"name":"dataDivider"},{"children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"genericCollectionItem"}],"name":"validationType"}],"name":"recordInfo"},{"name":"nameInData","value":"published"},{"children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"someFitnesseText"}],"name":"textId"},{"children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"someFitnesseDefText"}],"name":"defTextId"}],"name":"metadata","attributes":{"type":"collectionItem"}} | | CREATED |
| $adminAuthToken | metadata | {"children":[{"children":[{"name":"id","value":"testNotPublishedItem"},{"children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}],"name":"dataDivider"},{"children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"genericCollectionItem"}],"name":"validationType"}],"name":"recordInfo"},{"name":"nameInData","value":"notPublished"},{"children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"someFitnesseText"}],"name":"textId"},{"children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"someFitnesseDefText"}],"name":"defTextId"}],"name":"metadata","attributes":{"type":"collectionItem"}} | | CREATED |
| $adminAuthToken | metadata | {"children":[{"children":[{"name":"id","value":"testPublishedStatusCollection"},{"children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}],"name":"dataDivider"},{"children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"metadataItemCollection"}],"name":"validationType"}],"name":"recordInfo"},{"name":"nameInData","value":"publishedStatus"},{"children":[{"repeatId":"0","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"testPublishedItem"}],"name":"ref"},{"repeatId":"1","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"testNotPublishedItem"}],"name":"ref"}],"name":"collectionItemReferences"},{"children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"someFitnesseText"}],"name":"textId"},{"children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"someFitnesseDefText"}],"name":"defTextId"}],"name":"metadata","attributes":{"type":"itemCollection"}} | | CREATED |
| $adminAuthToken | metadata | {"children":[{"children":[{"name":"id","value":"testTextLink"},{"children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}],"name":"dataDivider"},{"children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"metadataRecordLink"}],"name":"validationType"}],"name":"recordInfo"},{"name":"nameInData","value":"someTestValidationLink"},{"children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"text"}],"name":"linkedRecordType"}],"name":"metadata","attributes":{"type":"recordLink"}} | | CREATED |

*!
!***> Create metadataGroups to use in recordType

!| RecordEndpointFixture |
| authToken | type | json | testCreateRecord? | getStatusType? |
| $adminAuthToken | metadata | {"children":[{"children":[{"name":"id","value":"testStudentThesisNewGroup"},{"children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}],"name":"dataDivider"},{"children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"metadataGroup"}],"name":"validationType"}],"name":"recordInfo"},{"name":"nameInData","value":"testStudentThesis"},{"children":[{"repeatId":"0","children":[{"name":"repeatMin","value":"1"},{"name":"repeatMax","value":"1"},{"children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"testTitleTextVar"}],"name":"ref"}],"name":"childReference"},{"repeatId":"1","children":[{"name":"repeatMin","value":"1"},{"name":"repeatMax","value":"1"},{"children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"testPublishedStatusCollectionVar"}],"name":"ref"}],"name":"childReference"},{"repeatId":"2","children":[{"name":"repeatMin","value":"1"},{"name":"repeatMax","value":"1"},{"children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"recordInfoNewGroup"}],"name":"ref"}],"name":"childReference"},{"repeatId":"3","children":[{"children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"testTextLink"}],"name":"ref"},{"name":"repeatMin","value":"0"},{"name":"repeatMax","value":"1"}],"name":"childReference"}],"name":"childReferences"},{"name":"excludePGroupCreation","value":"true"}],"name":"metadata","attributes":{"type":"group"}} | | CREATED |
| $adminAuthToken | metadata | {"children":[{"children":[{"name":"id","value":"testStudentThesisGroup"},{"children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}],"name":"dataDivider"},{"children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"metadataGroup"}],"name":"validationType"}],"name":"recordInfo"},{"name":"nameInData","value":"testStudentThesis"},{"children":[{"repeatId":"0","children":[{"name":"repeatMin","value":"1"},{"name":"repeatMax","value":"1"},{"children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"testTitleTextVar"}],"name":"ref"}],"name":"childReference"},{"repeatId":"1","children":[{"name":"repeatMin","value":"1"},{"name":"repeatMax","value":"1"},{"children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"testPublishedStatusCollectionVar"}],"name":"ref"}],"name":"childReference"},{"repeatId":"2","children":[{"name":"repeatMin","value":"1"},{"name":"repeatMax","value":"1"},{"children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"recordInfoGroup"}],"name":"ref"}],"name":"childReference"},{"repeatId":"3","children":[{"children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"testTextLink"}],"name":"ref"},{"name":"repeatMin","value":"0"},{"name":"repeatMax","value":"1"}],"name":"childReference"}],"name":"childReferences"}],"name":"metadata","attributes":{"type":"group"}} | | CREATED |

*!
!***> Create recordType testStudentThesis

!| RecordEndpointFixture |
| authToken | type | json | testCreateRecord? | getStatusType? |
| $adminAuthToken | recordType | {"children":[{"children":[{"name":"id","value":"testStudentThesis"},{"children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}],"name":"dataDivider"},{"children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"recordType"}],"name":"validationType"}],"name":"recordInfo"},{"name":"userSuppliedId","value":"false"},{"name":"idSource","value":"userSupplied"},{"repeatId":"0","name":"groupOfRecordType","value":"typeOfResource"},{"children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"testStudentThesisGroup"}],"name":"metadataId"},{"children":[{"name":"linkedRecordType","value":"presentation"},{"name":"linkedRecordId","value":"testStudentThesisOutputPGroup"}],"name":"presentationViewId"},{"children":[{"name":"linkedRecordType","value":"presentation"},{"name":"linkedRecordId","value":"testStudentThesisOutputPGroup"}],"name":"menuPresentationViewId"},{"children":[{"name":"linkedRecordType","value":"presentation"},{"name":"linkedRecordId","value":"testStudentThesisOutputPGroup"}],"name":"listPresentationViewId"},{"children":[{"name":"linkedRecordType","value":"presentation"},{"name":"linkedRecordId","value":"testStudentThesisPGroup"}],"name":"autocompletePresentationView"},{"children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"someFitnesseText"}],"name":"textId"},{"children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"someFitnesseDefText"}],"name":"defTextId"},{"name":"public","value":"false"},{"name":"storeInArchive","value":"false"},{"name":"usePermissionUnit","value":"false"},{"name":"useVisibility","value":"false"}],"name":"recordType"} | | CREATED |
| $adminAuthToken | validationType | {"name":"validationType","children":[{"name":"recordInfo","children":[{"name":"id","value":"testStudentThesis"},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}]},{"children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"validationType"}],"name":"validationType"}]},{"name":"textId","children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"fitnesseText"}]},{"name":"defTextId","children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"fitnesseText"}]},{"name":"newMetadataId","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"testStudentThesisNewGroup"}]},{"name":"metadataId","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"testStudentThesisGroup"}]},{"name":"newPresentationFormId","children":[{"name":"linkedRecordType","value":"presentation"},{"name":"linkedRecordId","value":"fitnessePGroup"}]},{"name":"presentationFormId","children":[{"name":"linkedRecordType","value":"presentation"},{"name":"linkedRecordId","value":"fitnessePGroup"}]},{"name":"validatesRecordType","children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"testStudentThesis"}]}]} | | CREATED |

*!
*!
!***> '''Case 1''' A record containing all required data for creation should validate as true

Validate a valid studentThesis record

Validate data for a testStudentThesis for create

!| MetadataValidationFixture |
| authToken | type | json | testValidateRecord? | getValid? | getStatusType? |
| $adminAuthToken | workOrder | {"order":{"name":"validationOrder","children":[{"name":"recordInfo","children":[{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"validationOrder"}]}]},{"name":"recordType","children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"testStudentThesis"}]},{"name":"validateLinks","value":"true"},{"name":"metadataToValidate","value":"new"}]},"record":{"name":"testStudentThesis","children":[{"name":"recordInfo","children":[{"name":"id","value":"studentThesis1"},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"testStudentThesis"}]}]},{"name":"testTitle","value":"Entitel"},{"name":"publishedStatus","value":"notPublished"}]}} | | true | OK |

*!
!***> '''Case 2''' A record containing missing data should validate as false

Same data as in create is used. This will fail, because the metadata definition for create differ from the definition for update.

!| MetadataValidationFixture |
| authToken | type | json | testValidateRecord? | getValid? | getStatusType? |
| $adminAuthToken | workOrder | {"order":{"name":"validationOrder","children":[{"name":"recordInfo","children":[{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"validationOrder"}]}]},{"name":"recordType","children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"testStudentThesis"}]},{"name":"validateLinks","value":"true"},{"name":"metadataToValidate","value":"existing"}]},"record":{"name":"testStudentThesis","children":[{"name":"recordInfo","children":[{"name":"id","value":"studentThesis1"},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"testStudentThesis"}]}]},{"name":"testTitle","value":"Entitel"},{"name":"publishedStatus","value":"notPublished"}]}} | | false | OK |

*!
!***> '''Case 3a''' A record containing all required data for update but the referred record does not exist in the system should validate as false

The record now contains all requiered fields defined in update definition. But it still will fail since the record referred to update does not exist

!| MetadataValidationFixture |
| authToken | type | json | testValidateRecord? | getValid? | getStatusType? |
| $adminAuthToken | workOrder | {"order":{"name":"validationOrder","children":[{"name":"recordInfo","children":[{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"validationOrder"}]}]},{"name":"recordType","children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"testStudentThesis"}]},{"name":"validateLinks","value":"true"},{"name":"metadataToValidate","value":"existing"}]},"record":{"name":"testStudentThesis","children":[{"name":"recordInfo","children":[{"name":"id","value":"studentThesis1"},{"name":"type","children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"testStudentThesis"}]},{"name":"createdBy","children":[{"name":"linkedRecordType","value":"user"},{"name":"linkedRecordId","value":"141414"}]},{"name":"tsCreated","value":"2019-02-22T08:04:33.131000Z"},{"name":"updated","children":[{"name":"updatedBy","children":[{"name":"linkedRecordType","value":"user"},{"name":"linkedRecordId","value":"141414"}]},{"name":"tsUpdated","value":"2019-02-22T08:04:33.131000Z"}],"repeatId":"0"},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"testStudentThesis"}]}]},{"name":"testTitle","value":"Entitel"},{"name":"publishedStatus","value":"notPublished"}]}} | | false | OK |

*!
!***> Prepare data for Case 3b

A record is created in order to be able to validate using update.

!| RecordEndpointFixture |
| authToken | type | json | testCreateRecord? | getStatusType? |
| $adminAuthToken | testStudentThesis | {"children":[{"children":[{"name":"id","value":"studentThesis1"},{"children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}],"name":"dataDivider"},{"children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"testStudentThesis"}],"name":"validationType"}],"name":"recordInfo"},{"name":"testTitle","value":"En titel"},{"name":"publishedStatus","value":"notPublished"}],"name":"testStudentThesis"} | | CREATED |

*!
!***> '''Case 3b: ''' A record containing all required data for update and the referred record exists in the system should validate as true

Using same valid data as case 3a but this time it is valid since the record exist.

!| MetadataValidationFixture |
| authToken | type | json | testValidateRecord? | getValid? | getStatusType? |
| $adminAuthToken | workOrder | {"order":{"name":"validationOrder","children":[{"name":"recordInfo","children":[{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"validationOrder"}]}]},{"name":"recordType","children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"testStudentThesis"}]},{"name":"validateLinks","value":"true"},{"name":"metadataToValidate","value":"existing"}]},"record":{"name":"testStudentThesis","children":[{"name":"recordInfo","children":[{"name":"id","value":"studentThesis1"},{"name":"type","children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"testStudentThesis"}]},{"name":"createdBy","children":[{"name":"linkedRecordType","value":"user"},{"name":"linkedRecordId","value":"141414"}]},{"name":"tsCreated","value":"2019-02-22T08:04:33.131000Z"},{"name":"updated","children":[{"name":"updatedBy","children":[{"name":"linkedRecordType","value":"user"},{"name":"linkedRecordId","value":"141414"}]},{"name":"tsUpdated","value":"2019-02-22T08:04:33.131000Z"}],"repeatId":"0"},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"testStudentThesis"}]}]},{"name":"testTitle","value":"Entitel"},{"name":"publishedStatus","value":"notPublished"}]}} | | true | OK |

*!
!***> '''Case 4a''' A record containing all required data for creation should validate as true using '''xml'''
!| Table:smartrics.rest.fitnesse.fixture.RestFixture | ${systemUnderTestUrl}rest/ |
| setHeader | Accept:application/vnd.cora.record+xml!-
-!Content-Type:application/vnd.cora.workorder+xml!-
-!authToken:$adminAuthToken|
| setBody | <?xml version="1.0" encoding="UTF-8"?><workOrder><order><validationOrder><recordInfo><dataDivider><linkedRecordType>system</linkedRecordType><linkedRecordId>testSystem</linkedRecordId></dataDivider><validationType><linkedRecordType>validationType</linkedRecordType><linkedRecordId>validationOrder</linkedRecordId></validationType></recordInfo><recordType><linkedRecordType>recordType</linkedRecordType><linkedRecordId>testStudentThesis</linkedRecordId></recordType><validateLinks>true</validateLinks><metadataToValidate>new</metadataToValidate></validationOrder></order><record><testStudentThesis><recordInfo><id>studentThesis1</id><dataDivider><linkedRecordType>system</linkedRecordType><linkedRecordId>testSystem</linkedRecordId></dataDivider><validationType><linkedRecordType>validationType</linkedRecordType><linkedRecordId>testStudentThesis</linkedRecordId></validationType></recordInfo><testTitle>Entitel</testTitle><publishedStatus>notPublished</publishedStatus></testStudentThesis></record></workOrder> |
| POST | /record/workOrder | 200 | | //validationResult/valid[text()='true'] |

*!
!***> '''Case 4b''' A record containing missing data should validate as false, using '''xml'''
!| Table:smartrics.rest.fitnesse.fixture.RestFixture | ${systemUnderTestUrl}rest/ |
| setHeader | Accept:application/vnd.cora.record+xml!-
-!Content-Type:application/vnd.cora.workorder+xml!-
-!authToken:$adminAuthToken|
| setBody | <?xml version="1.0" encoding="UTF-8"?><workOrder><order><validationOrder><recordInfo><dataDivider><linkedRecordType>system</linkedRecordType><linkedRecordId>testSystem</linkedRecordId></dataDivider><validationType><linkedRecordType>validationType</linkedRecordType><linkedRecordId>validationOrder</linkedRecordId></validationType></recordInfo><recordType><linkedRecordType>recordType</linkedRecordType><linkedRecordId>testStudentThesis</linkedRecordId></recordType><validateLinks>false</validateLinks><metadataToValidate>existing</metadataToValidate></validationOrder></order><record><testStudentThesis><recordInfo><id>studentThesis1</id><type><linkedRecordType>recordType</linkedRecordType><linkedRecordId>testStudentThesis</linkedRecordId></type><dataDivider><linkedRecordType>system</linkedRecordType><linkedRecordId>testSystem</linkedRecordId></dataDivider><validationType><linkedRecordType>validationType</linkedRecordType><linkedRecordId>testStudentThesis</linkedRecordId></validationType></recordInfo><testTitle>Entitel</testTitle><publishedStatus>notPublished</publishedStatus></testStudentThesis></record></workOrder> |
| POST | /record/workOrder | 200 | | //validationResult/valid[text()='false'] |

*!
!***> '''Case 5a: ''' A record with a missing validationOrder should cause bad request, using '''xml'''.
!| Table:smartrics.rest.fitnesse.fixture.RestFixture | ${systemUnderTestUrl}rest/ |
| setHeader | Accept:application/vnd.cora.record+xml!-
-!Content-Type:application/vnd.cora.workorder+xml!-
-!authToken:$adminAuthToken|
| setBody | <?xml version="1.0" encoding="UTF-8"?><workOrder><order></order><record><testStudentThesis><recordInfo><id>studentThesis1</id><type><linkedRecordType>recordType</linkedRecordType><linkedRecordId>testStudentThesis</linkedRecordId></type><dataDivider><linkedRecordType>system</linkedRecordType><linkedRecordId>testSystem</linkedRecordId></dataDivider><validationType><linkedRecordType>validationType</linkedRecordType><linkedRecordId>testStudentThesis</linkedRecordId></validationType></recordInfo><testTitle>Entitel</testTitle><publishedStatus>notPublished</publishedStatus></testStudentThesis></record></workOrder> |
| POST | /record/workOrder | 400 | | Validation failed due to: WorkOrder part 'order' not found. |
*!
!***> '''Case 5b: ''' A record with a missing record should cause bad request, using '''xml'''.
!| Table:smartrics.rest.fitnesse.fixture.RestFixture | ${systemUnderTestUrl}rest/ |
| setHeader | Accept:application/vnd.cora.record+xml!-
-!Content-Type:application/vnd.cora.workorder+xml!-
-!authToken:$adminAuthToken|
| setBody | <?xml version="1.0" encoding="UTF-8"?><workOrder><order><validationOrder><recordInfo><dataDivider><linkedRecordType>system</linkedRecordType><linkedRecordId>testSystem</linkedRecordId></dataDivider><validationType><linkedRecordType>validationType</linkedRecordType><linkedRecordId>validationOrder</linkedRecordId></validationType></recordInfo><recordType><linkedRecordType>recordType</linkedRecordType><linkedRecordId>testStudentThesis</linkedRecordId></recordType><validateLinks>false</validateLinks><metadataToValidate>new</metadataToValidate></validationOrder></order><record></record></workOrder> |
| POST | /record/workOrder | 400 | | Validation failed due to: WorkOrder part 'record' not found. |
*!
!***> '''Case 5c: ''' A record containing multiple validationOrders should cause bad request, using '''xml'''.
!| Table:smartrics.rest.fitnesse.fixture.RestFixture | ${systemUnderTestUrl}rest/ |
| setHeader | Accept:application/vnd.cora.record+xml!-
-!Content-Type:application/vnd.cora.workorder+xml!-
-!authToken:$adminAuthToken|
| setBody | <?xml version="1.0" encoding="UTF-8"?><workOrder><order><validationOrder><recordInfo><dataDivider><linkedRecordType>system</linkedRecordType><linkedRecordId>testSystem</linkedRecordId></dataDivider><validationType><linkedRecordType>validationType</linkedRecordType><linkedRecordId>validationOrder</linkedRecordId></validationType></recordInfo><recordType><linkedRecordType>recordType</linkedRecordType><linkedRecordId>testStudentThesis</linkedRecordId></recordType><validateLinks>false</validateLinks><metadataToValidate>existing</metadataToValidate></validationOrder><validationOrder><recordInfo><dataDivider><linkedRecordType>system</linkedRecordType><linkedRecordId>testSystem</linkedRecordId></dataDivider><validationType><linkedRecordType>validationType</linkedRecordType><linkedRecordId>validationOrder</linkedRecordId></validationType></recordInfo><recordType><linkedRecordType>recordType</linkedRecordType><linkedRecordId>testStudentThesis</linkedRecordId></recordType><validateLinks>false</validateLinks><metadataToValidate>existing</metadataToValidate></validationOrder></order><record><testStudentThesis><recordInfo><id>studentThesis1</id><type><linkedRecordType>recordType</linkedRecordType><linkedRecordId>testStudentThesis</linkedRecordId></type><dataDivider><linkedRecordType>system</linkedRecordType><linkedRecordId>testSystem</linkedRecordId></dataDivider><validationType><linkedRecordType>validationType</linkedRecordType><linkedRecordId>testStudentThesis</linkedRecordId></validationType></recordInfo><testTitle>Entitel</testTitle><publishedStatus>notPublished</publishedStatus></testStudentThesis></record></workOrder> |
| POST | /record/workOrder | 400 | | Validation failed due to: Too many children in workOrder part. |
*!
!***> '''Case 5d: ''' A record containing multiple records should cause bad request, using '''xml'''.
!| Table:smartrics.rest.fitnesse.fixture.RestFixture | ${systemUnderTestUrl}rest/ |
| setHeader | Accept:application/vnd.cora.record+xml!-
-!Content-Type:application/vnd.cora.workorder+xml!-
-!authToken:$adminAuthToken|
| setBody | <?xml version="1.0" encoding="UTF-8"?><workOrder><order><validationOrder><recordInfo><dataDivider><linkedRecordType>system</linkedRecordType><linkedRecordId>testSystem</linkedRecordId></dataDivider><validationType><linkedRecordType>validationType</linkedRecordType><linkedRecordId>validationOrder</linkedRecordId></validationType></recordInfo><recordType><linkedRecordType>recordType</linkedRecordType><linkedRecordId>testStudentThesis</linkedRecordId></recordType><validateLinks>false</validateLinks><metadataToValidate>existing</metadataToValidate></validationOrder></order><record><testStudentThesis><recordInfo><id>studentThesis1</id><type><linkedRecordType>recordType</linkedRecordType><linkedRecordId>testStudentThesis</linkedRecordId></type><dataDivider><linkedRecordType>system</linkedRecordType><linkedRecordId>testSystem</linkedRecordId></dataDivider><validationType><linkedRecordType>validationType</linkedRecordType><linkedRecordId>testStudentThesis</linkedRecordId></validationType></recordInfo><testTitle>Entitel</testTitle><publishedStatus>notPublished</publishedStatus></testStudentThesis><testStudentThesis><recordInfo><id>studentThesis1</id><type><linkedRecordType>recordType</linkedRecordType><linkedRecordId>testStudentThesis</linkedRecordId></type><dataDivider><linkedRecordType>system</linkedRecordType><linkedRecordId>testSystem</linkedRecordId></dataDivider><validationType><linkedRecordType>validationType</linkedRecordType><linkedRecordId>testStudentThesis</linkedRecordId></validationType></recordInfo><testTitle>Entitel</testTitle><publishedStatus>notPublished</publishedStatus></testStudentThesis></record></workOrder> |
| POST | /record/workOrder | 400 | | Validation failed due to: Too many children in workOrder part. |

*!
!***> '''Case 6a: ''' A recordType of record that does not match the recordType specified in the validationOrder should validate as false, using '''json'''.
!| Table:smartrics.rest.fitnesse.fixture.RestFixture | ${systemUnderTestUrl}rest/ |
| setHeader | Accept:application/vnd.cora.record+xml!-
-!Content-Type:application/vnd.cora.workorder+json!-
-!authToken:$adminAuthToken|
| setBody | {"order":{"name":"validationOrder","children":[{"name":"recordInfo","children":[{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"validationOrder"}]}]},{"name":"recordType","children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"binary"}]},{"name":"validateLinks","value":"true"},{"name":"metadataToValidate","value":"new"}]},"record":{"name":"testStudentThesis","children":[{"name":"recordInfo","children":[{"name":"id","value":"studentThesis1"},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"testStudentThesis"}]}]},{"name":"testTitle","value":"Entitel"},{"name":"publishedStatus","value":"notPublished"}]}} |
| POST | /record/workOrder | 200 | | //validationResult/valid[text()='false'] |
*!
!***> '''Case 6b: ''' A recordType of record that does not match the recordType specified in the validationOrder should validate as false, using '''xml'''.
!| Table:smartrics.rest.fitnesse.fixture.RestFixture | ${systemUnderTestUrl}rest/ |
| setHeader | Accept:application/vnd.cora.record+xml!-
-!Content-Type:application/vnd.cora.workorder+xml!-
-!authToken:$adminAuthToken|
| setBody | <?xml version="1.0" encoding="UTF-8"?><workOrder><order><validationOrder><recordInfo><dataDivider><linkedRecordType>system</linkedRecordType><linkedRecordId>testSystem</linkedRecordId></dataDivider><validationType><linkedRecordType>validationType</linkedRecordType><linkedRecordId>validationOrder</linkedRecordId></validationType></recordInfo><recordType><linkedRecordType>recordType</linkedRecordType><linkedRecordId>binary</linkedRecordId></recordType><validateLinks>false</validateLinks><metadataToValidate>new</metadataToValidate></validationOrder></order><record><testStudentThesis><recordInfo><id>studentThesis1</id><dataDivider><linkedRecordType>system</linkedRecordType><linkedRecordId>testSystem</linkedRecordId></dataDivider><validationType><linkedRecordType>validationType</linkedRecordType><linkedRecordId>testStudentThesis</linkedRecordId></validationType></recordInfo><testTitle>Entitel</testTitle><publishedStatus>notPublished</publishedStatus></testStudentThesis></record></workOrder> |
| POST | /record/workOrder | 200 | | //validationResult/valid[text()='false'] |

*!
!***> '''Case 7a''' When validationOrder is set to validate links, a record with an existing recordlink should validate as true
!| MetadataValidationFixture |
| authToken | type | json | testValidateRecord? | getValid? | getStatusType? |
| $adminAuthToken | workOrder | {"order":{"name":"validationOrder","children":[{"name":"recordInfo","children":[{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"validationOrder"}]}]},{"name":"recordType","children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"testStudentThesis"}]},{"name":"validateLinks","value":"true"},{"name":"metadataToValidate","value":"new"}]},"record":{"name":"testStudentThesis","children":[{"name":"recordInfo","children":[{"name":"id","value":"studentThesis1"},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"testStudentThesis"}]}]},{"children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"someFitnesseText"}],"name":"someTestValidationLink"},{"name":"testTitle","value":"Entitel"},{"name":"publishedStatus","value":"notPublished"}]}} | | true | OK |
*!
!***> '''Case 7b''' When validationOrder is set to validate links, a record with an non-existing recordlink should validate as false
!| MetadataValidationFixture |
| authToken | type | json | testValidateRecord? | getValid? | getStatusType? |
| $adminAuthToken | workOrder | {"order":{"name":"validationOrder","children":[{"name":"recordInfo","children":[{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"validationOrder"}]}]},{"name":"recordType","children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"testStudentThesis"}]},{"name":"validateLinks","value":"true"},{"name":"metadataToValidate","value":"new"}]},"record":{"name":"testStudentThesis","children":[{"name":"recordInfo","children":[{"name":"id","value":"studentThesis1"},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"testStudentThesis"}]}]},{"children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"someNoneExistingText"}],"name":"someTestValidationLink"},{"name":"testTitle","value":"Entitel"},{"name":"publishedStatus","value":"notPublished"}]}} | | false | OK |
*!
!***> '''Case 7c''' When validationOrder is set to NOT validate links, a record with a non-existing recordlink should validate as true
!| MetadataValidationFixture |
| authToken | type | json | testValidateRecord? | getValid? | getStatusType? |
| $adminAuthToken | workOrder | {"order":{"name":"validationOrder","children":[{"name":"recordInfo","children":[{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"validationOrder"}]}]},{"name":"recordType","children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"testStudentThesis"}]},{"name":"validateLinks","value":"false"},{"name":"metadataToValidate","value":"new"}]},"record":{"name":"testStudentThesis","children":[{"name":"recordInfo","children":[{"name":"id","value":"studentThesis1"},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"testStudentThesis"}]}]},{"children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"someNoneExistingText"}],"name":"someTestValidationLink"},{"name":"testTitle","value":"Entitel"},{"name":"publishedStatus","value":"notPublished"}]}} | | true | OK |
*!
----
!***> Clean up created data

Delete studentThesis

!| RecordEndpointFixture |
| authToken | type | id | testDeleteRecord? | getStatusType? |
| $adminAuthToken | testStudentThesis | studentThesis1 | | OK |

Clean up created data, metadata and texts

!| RecordEndpointFixture |
| authToken | type | id | testDeleteRecord? | getStatusType? |
| $adminAuthToken | search | testStudentThesisSearch | | OK |
| $adminAuthToken | validationType | testStudentThesis | | OK |
| $adminAuthToken | recordType | testStudentThesis | | OK |
| $adminAuthToken | presentation | testStudentThesisPGroup | | OK |
| $adminAuthToken | presentation | testStudentThesisOutputPGroup | | OK |
| $adminAuthToken | metadata | testStudentThesisNewGroup | | OK |
| $adminAuthToken | metadata | testStudentThesisGroup | | OK |
| $adminAuthToken | presentation | testTitlePVar | | OK |
| $adminAuthToken | presentation | testTitleOutputPVar | | OK |
| $adminAuthToken | metadata | testTitleTextVar | | OK |
| $adminAuthToken | presentation | testPublishedStatusPCollVar | | OK |
| $adminAuthToken | presentation | testPublishedStatusOutputPCollVar | | OK |
| $adminAuthToken | metadata | testPublishedStatusCollectionVar | | OK |
| $adminAuthToken | metadata | testPublishedStatusCollection | | OK |
| $adminAuthToken | metadata | testPublishedItem | | OK |
| $adminAuthToken | metadata | testNotPublishedItem | | OK |
| $adminAuthToken | text | someFitnesseText | | OK |
| $adminAuthToken | text | someFitnesseDefText | | OK |
| $adminAuthToken | presentation | testTextPLink | | OK |
| $adminAuthToken | presentation | testTextOutputPLink | | OK |
| $adminAuthToken | metadata | testTextLink | | OK |

*!
