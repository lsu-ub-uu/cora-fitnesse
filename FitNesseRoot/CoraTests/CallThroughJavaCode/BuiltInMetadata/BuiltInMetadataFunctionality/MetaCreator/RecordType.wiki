---
Test
---
!1 Testing metacompleter and creator for recordType
!2 Read metadata, texts and presentations to make sure they do not already exist
If text ids are not provided when creating a recordType, the text ids are added and the texts are created in storage if they do not already exist.

Read texts to make sure they do not exist

!***> Read fitnesseBookText and fitnesseBookDefText

!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| fitnesseBookText | text | | NOT_FOUND |
| fitnesseBookDefText | text | | NOT_FOUND |

*!
If a metadataGroup that the recordType refers to does not exist in storage, the metadataGroup is created.

Read metadatGroups to make sure they do not exist

!***> Read fitnesseBookGroup

!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| fitnesseBookGroup | metadata | | NOT_FOUND |

*!
If a presentationGroup that the recordType refers to does not exist in storage, the presentationGroup is created.

Read presentationGroups to make sure they do not exist

!***> Read fitnesseBookOutputPGroup, fitnesseBookPGroup, fitnesseBookNewPGroup, fitnesseBookMenuPGroup and fitnesseBookListPGroup

!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| fitnesseBookOutputPGroup | presentation | | NOT_FOUND |
| fitnesseBookPGroup | presentation | | NOT_FOUND |
| fitnesseBookNewPGroup | presentation | | NOT_FOUND |
| fitnesseBookMenuPGroup | presentation | | NOT_FOUND |
| fitnesseBookListPGroup | presentation | | NOT_FOUND |
| fitnesseBookAutocompletePGroup | presentation | | NOT_FOUND |

*!
If a search for the recordType does not exist in storage, the search is created.

Read search to make sure it does not exist

!***> Read fitnesseBookSearch

!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| fitnesseBookSearch | search | | NOT_FOUND |

*!
!2 
!2 Create a new recordType
!***> Create data of recordType recordType (fitnesseBook)

!| RecordEndpointFixture |
| authToken | type | json | testCreateRecord? | getStatusType? |
| $adminAuthToken | recordType | {"children":[{"children":[{"name":"id","value":"fitnesseBook"},{"children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}],"name":"dataDivider"},{"children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"recordType"}],"name":"validationType"}],"name":"recordInfo"},{"name":"idSource","value":"userSupplied"},{"repeatId":"0","name":"groupOfRecordType","value":"metadata"},{"name":"storeInArchive","value":"false"},{"name":"usePermissionUnit","value":"false"},{"name":"useVisibility","value":"false"}],"name":"recordType"} | | CREATED |

*!
Read fitnesseBook to see that metadata has been added

!***> Read fitnesseBook

!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| fitnesseBook | recordType | =~/"name":"linkedRecordId","value":"fitnesseBookText".*"name":"textId".*"name":"linkedRecordId","value":"fitnesseBookDefText".*"name":"defTextId".*"name":"linkedRecordId","value":"fitnesseBookGroup".*"name":"metadataId".*"name":"linkedRecordId","value":"fitnesseBookOutputPGroup".*"name":"presentationViewId".*"name":"linkedRecordId","value":"fitnesseBookMenuPGroup".*"name":"menuPresentationViewId".*"name":"linkedRecordId","value":"fitnesseBookListPGroup".*"name":"listPresentationViewId".*"name":"linkedRecordId","value":"fitnesseBookAutocompletePGroup".*"name":"autocompletePresentationView"/ | OK |

*!
Read texts again to see that they have been created

!***> Read fitnesseBookText and fitnesseBookDefText

!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| fitnesseBookText | text | | OK |
| fitnesseBookDefText | text | | OK |

*!
Read metadataGroups again to see that it has been created

!***> Read fitnesseBookGroup

!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| fitnesseBookGroup | metadata | | OK |

*!
Read presentationGroups again to see that they have been created

!***> Read fitnesseBookOutputPGroup, fitnesseBookPGroup, fitnesseBookNewPGroup, fitnesseBookMenuPGroup and fitnesseBookListPGroup

!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| fitnesseBookOutputPGroup | presentation | =~/"name":"mode".*"value":"output".*"name":"linkedRecordId","value":"recordInfoOutputPGroup".*"name":"refGroup"/ | OK |
| fitnesseBookMenuPGroup   | presentation | =~/"name":"mode".*"value":"output".*"name":"linkedRecordId","value":"recordInfoOutputPGroup".*"name":"refGroup"/ | OK |
| fitnesseBookListPGroup   | presentation | =~/"name":"mode".*"value":"output".*"name":"linkedRecordId","value":"recordInfoOutputPGroup".*"name":"refGroup"/ | OK |

*!
!2 Delete some data
!***> Delete RecordType and presentations

!| RecordEndpointFixture |
| authToken | type | id | testDeleteRecord? | getStatusType? |
| $adminAuthToken | search | fitnesseBookSearch | | OK |
| $adminAuthToken | recordType | fitnesseBook | | OK |
| $adminAuthToken | presentation | fitnesseBookOutputPGroup | | OK |
| $adminAuthToken | presentation | fitnesseBookMenuPGroup | | OK |
| $adminAuthToken | presentation | fitnesseBookListPGroup | | OK |
| $adminAuthToken | presentation | fitnesseBookAutocompletePGroup | | OK |

*!
!2 Update metadata groups and add some childRefs
!***> Create metadataTextVariable someTestTextVar

!| RecordEndpointFixture |
| authToken | type | json | testCreateRecord? | getStatusType? |
| $adminAuthToken | metadata | {"children":[{"children":[{"name":"id","value":"someTestTextVar"},{"children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}],"name":"dataDivider"},{"children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"metadataTextVariable"}],"name":"validationType"}],"name":"recordInfo"},{"name":"nameInData","value":"someTest"},{"name":"regEx","value":"(^[0-9A-Za-z:-_\\s]{2,50}$)"}],"name":"metadata","attributes":{"type":"textVariable"}} | | CREATED |

*!
!***> Add someTestTextVar to  autocreatedfitnesseBookGroup

!| RecordEndpointFixture |
| authToken | type | id | json | testUpdateRecord? | getStatusType? |
| $adminAuthToken | metadata | fitnesseBookGroup | {"children":[{"children":[{"name":"ignoreOverwriteProtection","value":"true"},{"name":"id","value":"fitnesseBookGroup"},{"children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"metadata"}],"name":"type"},{"children":[{"name":"linkedRecordType","value":"user"},{"name":"linkedRecordId","value":"131313"}],"name":"createdBy"},{"name":"tsCreated","value":"2017-10-01T00:00:00.000000Z"},{"children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}],"name":"dataDivider"},{"children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"metadataGroup"}],"name":"validationType"}],"name":"recordInfo"},{"name":"nameInData","value":"fitnesseBook"},{"children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"fitnesseBookGroupText"}],"name":"textId"},{"children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"fitnesseBookGroupDefText"}],"name":"defTextId"},{"children":[{"repeatId":"0","children":[{"name":"repeatMin","value":"1"},{"name":"repeatMax","value":"1"},{"children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"recordInfoGroup"}],"name":"ref"}],"name":"childReference"},{"repeatId":"1","children":[{"name":"repeatMin","value":"1"},{"name":"repeatMax","value":"1"},{"children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"someTestTextVar"}],"name":"ref"}],"name":"childReference"}],"name":"childReferences"}],"name":"metadata","attributes":{"type":"group"}} | | OK |

*!
!2 Create recordType fitnesseBook again and read presentation group again
!***> Create data of recordType recordType (fitnesseBook)

!| RecordEndpointFixture |
| authToken | type | json | testCreateRecord? | getStatusType? |
| $adminAuthToken | recordType | {"children":[{"children":[{"name":"id","value":"fitnesseBook"},{"children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}],"name":"dataDivider"},{"children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"recordType"}],"name":"validationType"}],"name":"recordInfo"},{"name":"idSource","value":"userSupplied"},{"repeatId":"0","name":"groupOfRecordType","value":"metadata"},{"name":"storeInArchive","value":"false"},{"name":"usePermissionUnit","value":"false"},{"name":"useVisibility","value":"false"}],"name":"recordType"} | | CREATED |

*!
Read presentationGroups again to see that they have been created. This time fitnesseBookFormPGroup, fitnesseBookFormNewPGroup and fitnesseBookViewPGroup should also have a reference to presentation variable for the added text variable child

!***> Read fitnesseBookOutputPGroup, fitnesseBookPGroup, fitnesseBookNewPGroup, fitnesseBookMenuPGroup and fitnesseBookListPGroup

!| RecordEndpointFixture |
| id | type | testReadRecord? | getStatusType? |
| fitnesseBookOutputPGroup | presentation | =~/"name":"linkedRecordId","value":"recordInfoOutputPGroup".*"name":"refGroup".*"name":"linkedRecordId","value":"someTestOutputPVar".*"name":"refGroup"/ | OK |
| fitnesseBookMenuPGroup | presentation | =~/"name":"linkedRecordId","value":"recordInfoOutputPGroup".*"name":"refGroup"/ | OK |
| fitnesseBookListPGroup | presentation | =~/"name":"linkedRecordId","value":"recordInfoOutputPGroup".*"name":"refGroup"/ | OK |

*!
!1 Reset testdata
Remove data created for this test

!***> Delete created metadata, presentations and texts

!| RecordEndpointFixture |
| authToken | type | id | testDeleteRecord? | getStatusType? |
| $adminAuthToken | search | fitnesseBookSearch | | OK |
| $adminAuthToken | recordType | fitnesseBook | | OK |
| $adminAuthToken | presentation | fitnesseBookOutputPGroup | | OK |
| $adminAuthToken | presentation | fitnesseBookMenuPGroup | | OK |
| $adminAuthToken | presentation | fitnesseBookListPGroup | | OK |
| $adminAuthToken | presentation | fitnesseBookAutocompletePGroup | | OK |
| $adminAuthToken | presentation | someTestPVar | | OK |
| $adminAuthToken | presentation | someTestOutputPVar | | OK |
| $adminAuthToken | metadata | fitnesseBookGroup | | OK |
| $adminAuthToken | metadata | someTestTextVar | | OK |
| $adminAuthToken | text | fitnesseBookText | | OK |
| $adminAuthToken | text | fitnesseBookDefText | | OK |
| $adminAuthToken | text | fitnesseBookGroupText | | OK |
| $adminAuthToken | text | fitnesseBookGroupDefText | | OK |
| $adminAuthToken | text | fitnesseBookSearchText | | OK |
| $adminAuthToken | text | fitnesseBookSearchDefText | | OK |

*!

!style_red[OBS: above tests should be moved here]
!1 Metacreator for record type
Metacreator will create the following data if it does not exist in storage.
 * Metadata group for definitionNew and definitionUpdate.
 * Presentations for menu, list, output and autocomplete.
 * Text and defText.
 * Search for the record type.
 * Links for definitions, presentations, search and texts.

 * '''Case 1''': When creating a record type using an already created group that have 'recordInfo' but id does not contain the text 'recordInfo'. Then all presentations should be created correctly.

!***> '''Case1''' 

!***> Create group with a recordInfo but the id does not contain the text recordinfo


This is a recordInfoGroup
!define currentAuthToken {$adminAuthToken}
!define recordType {metadata}
!define recordId {groupWithRecordWithInfoGroup}

!define createData {!-{"name":"metadata","children":[{"name":"recordInfo","children":[{"name":"id","value":"groupWithRecordWithInfoGroup"},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"metadataGroup"}]},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}]}]},{"name":"nameInData","value":"recordInfo"},{"name":"textId","children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"fitnesseText"}]},{"name":"defTextId","children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"fitnesseText"}]},{"name":"childReferences","children":[{"name":"childReference","repeatId":"1","children":[{"name":"repeatMin","value":"1"},{"name":"repeatMax","value":"1"},{"name":"ref","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"fitnesseMetadataTextVar"}]}]}]}],"attributes":{"type":"group"}}-!}

!define expectedCreateResult {CREATED}
!define expectedAnswer {}

!include -seamless .HelperPages.createRecord

This is the definition group for the record type.
!define recordType {metadata}
!define recordId {definitionExampleGroup}

!define createData {!-{"name":"metadata","children":[{"name":"recordInfo","children":[{"name":"id","value":"definitionExampleGroup"},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"metadataGroup"}]},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}]}]},{"name":"nameInData","value":"recordInfo"},{"name":"textId","children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"fitnesseText"}]},{"name":"defTextId","children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"fitnesseText"}]},{"name":"childReferences","children":[{"name":"childReference","repeatId":"1","children":[{"name":"repeatMin","value":"1"},{"name":"repeatMax","value":"1"},{"name":"ref","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"groupWithRecordWithInfoGroup"}]}]},{"name":"childReference","repeatId":"2","children":[{"name":"repeatMin","value":"1"},{"name":"repeatMax","value":"1"},{"name":"ref","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"fitnesseMetadataTextVar"}]}]}]}],"attributes":{"type":"group"}}-!}

!define expectedCreateResult {CREATED}
!define expectedAnswer {}

!include -seamless .HelperPages.createRecord

*!
!***> Create record type that uses group groupWithRecordWithInfo
!define recordType {recordType}
!define recordId {metacreatorRecordTypeWithGroupWithRecordInfo}
!define recordPermissions {!-{}-!}

!define createData {!-{"children":[{"children":[{"name":"id","value":"metacreatorRecordTypeWithGroupWithRecordInfo"},{"children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}],"name":"dataDivider"},{"children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"recordType"}],"name":"validationType"}],"name":"recordInfo"},{"name":"metadataId","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"definitionExampleGroup"}]},{"name":"idSource","value":"timestamp"},{"repeatId":"0","name":"groupOfRecordType","value":"metadata"},{"name":"storeInArchive","value":"false"},{"name":"usePermissionUnit","value":"false"},{"name":"useVisibility","value":"false"}],"name":"recordType"}-!}
!define expectedCreatedData {!-{"name":"recordType","children":[{"name":"metadataId","children":[{"name":"linkedRecordType","value":"metadata"},{"name":"linkedRecordId","value":"definitionExampleGroup"}]},{"name":"recordInfo","children":[{"name":"id","value":"metacreatorRecordTypeWithGroupWithRecordInfo"},{"name":"type","children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"recordType"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"recordType"}]},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}]}]},{"name":"presentationViewId","children":[{"name":"linkedRecordType","value":"presentation"},{"name":"linkedRecordId","value":"metacreatorRecordTypeWithGroupWithRecordInfoOutputPGroup"}]},{"name":"menuPresentationViewId","children":[{"name":"linkedRecordType","value":"presentation"},{"name":"linkedRecordId","value":"metacreatorRecordTypeWithGroupWithRecordInfoMenuPGroup"}]},{"name":"listPresentationViewId","children":[{"name":"linkedRecordType","value":"presentation"},{"name":"linkedRecordId","value":"metacreatorRecordTypeWithGroupWithRecordInfoListPGroup"}]},{"name":"idSource","value":"timestamp"},{"name":"textId","children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"metacreatorRecordTypeWithGroupWithRecordInfoText"}]},{"name":"defTextId","children":[{"name":"linkedRecordType","value":"text"},{"name":"linkedRecordId","value":"metacreatorRecordTypeWithGroupWithRecordInfoDefText"}]},{"name":"autocompletePresentationView","children":[{"name":"linkedRecordType","value":"presentation"},{"name":"linkedRecordId","value":"metacreatorRecordTypeWithGroupWithRecordInfoAutocompletePGroup"}]},{"name":"groupOfRecordType","repeatId":"0","value":"metadata"},{"name":"public","value":"false"},{"name":"storeInArchive","value":"false"}]}-!}

!define expectedCreateResult {CREATED}
!define expectedAnswer {}
!define expectedCompareResult {OK}
!define expectedActionResult {Action delete is missing.}
!define expectedPermissionResult {OK}

!include -seamless .HelperPages.createCheckReadCheck
*!
!***> Clean up

!| RecordEndpointFixture |
| authToken | type | id | testDeleteRecord? | getStatusType? |
| $adminAuthToken | search | metacreatorRecordTypeWithGroupWithRecordInfoSearch | | OK |
| $adminAuthToken | recordType | metacreatorRecordTypeWithGroupWithRecordInfo | | OK |
| $adminAuthToken | presentation | metacreatorRecordTypeWithGroupWithRecordInfoOutputPGroup | | OK |
| $adminAuthToken | presentation | metacreatorRecordTypeWithGroupWithRecordInfoMenuPGroup | | OK |
| $adminAuthToken | presentation | metacreatorRecordTypeWithGroupWithRecordInfoListPGroup | | OK |
| $adminAuthToken | presentation | metacreatorRecordTypeWithGroupWithRecordInfoAutocompletePGroup | | OK |
| $adminAuthToken | presentation | definitionExamplePGroup | | OK |
| $adminAuthToken | presentation | definitionExampleOutputPGroup | | OK |
| $adminAuthToken | presentation | groupWithRecordWithInfoPGroup | | OK |
| $adminAuthToken | presentation | groupWithRecordWithInfoOutputPGroup | | OK |
| $adminAuthToken | metadata | definitionExampleGroup | | OK |
| $adminAuthToken | metadata | groupWithRecordWithInfoGroup | | OK |
| $adminAuthToken | text | metacreatorRecordTypeWithGroupWithRecordInfoText | | OK |
| $adminAuthToken | text | metacreatorRecordTypeWithGroupWithRecordInfoDefText | | OK |
| $adminAuthToken | text | metacreatorRecordTypeWithGroupWithRecordInfoSearchDefText | | OK |
| $adminAuthToken | text | metacreatorRecordTypeWithGroupWithRecordInfoSearchText | | OK |

*!
*!