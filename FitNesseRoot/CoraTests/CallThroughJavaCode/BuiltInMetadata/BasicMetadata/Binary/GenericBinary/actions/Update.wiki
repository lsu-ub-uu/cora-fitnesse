---
Static
---

!4 Update
It should really not be possible to update a binary record that does not have a master representation, see: CORA-2471
 * '''Case 1''': It should be possible to update visiblity of a binary. This should update the existing tsVisibility timestamp.
 * '''Case 2''': If the value of visibility is not changed to another value during an update (ex. published -> published), tsVisibility should not be updated and remain unchanged.

!***> Case 1
We store the original existing (!-$originalTsVisibility-!) from the binary we created. Since we change the value of visibility this means that the timestamp should also change when we update.

!***> Setup case 1
!include -seamless .HelperPages.defineAdminAuthToken
!define recordType {binary}
!define unpublishedBinaryForUpdate {!-{"name":"binary","children":[{"name":"recordInfo","children":[{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"genericBinary"}]}]},{"name":"adminInfo","children":[{"name":"visibility","value":"unpublished"}]},{"name":"originalFileName","value":"someOriginalFileName"},{"name":"expectedFileSize","value":"0"}],"attributes":{"type":"generic"}}-!}


!| ChildComparerFixture |
| authToken       | type   | json                          | testCreateAndStoreRecord? | getStatusType? | getCreatedId?     |
| $adminAuthToken | binary | ${unpublishedBinaryForUpdate} | $readRecordPayload= | CREATED        | $unpublishedBinaryForUpdateId= |

!| script | ExtractSubstringUsingRegex |
| $originalTsVisibility= | get substring using text | $readRecordPayload | and regex | "tsVisibility","value":"\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{6}Z" |
*!
!define visibility {published}
!define updateData {!-{"name":"binary","children":[{"name":"recordInfo","children":[{"children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"binary"}],"name":"type"},{"name":"ignoreOverwriteProtection","value":"true"},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"genericBinary"}]},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}]},{"name":"id","value":"-!$unpublishedBinaryForUpdateId!-"}]},{"name":"adminInfo","children":[{"name":"visibility","value":"-!${visibility}!-"}]}],"attributes":{"type":"generic"}}-!}
!define expectedUpdatedData {!-{"name":"binary","children":[{"name":"recordInfo","children":[{"children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"binary"}],"name":"type"},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"genericBinary"}]},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}]},{"name":"id","value":"-!$unpublishedBinaryForUpdateId!-"}]},{"name":"adminInfo","children":[{"name":"visibility","value":"-!${visibility}!-"}]},{"children":[],"name":"master"},{"children":[],"name":"thumbnail"},{"children":[],"name":"medium"},{"children":[],"name":"large"},{"children":[],"name":"jp2"}],"attributes":{"type":"generic"}}-!}
!define originalData updateData
!define expectedOriginalData originalData
!define expectedUpdateResult {OK}
!define expectedAnswer {=~/^(?!.*$originalTsVisibility)/}
!define recordId {$unpublishedBinaryForUpdateId}
!include -seamless .HelperPages.updateCheckReadCheck
!
*!
!***> Case 2 
We store the previous tsVisibility (!-$tsVisibility-!) from the first update. Since we do not update the visbility we assert that the timestamp has not changed.

!***> Setup case 2
!| ChildComparerFixture |
| authToken | type | id | testReadAndStoreRecord? |
| ${currentAuthToken} | ${recordType} | $unpublishedBinaryForUpdateId | $readRecordPayload= |

!| script | ExtractSubstringUsingRegex |
| $tsVisibility= | get substring using text | $readRecordPayload | and regex | "tsVisibility","value":"\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{6}Z" |
*!

!define expectedAnswer {=~/$tsVisibility/}
!include -seamless .HelperPages.updateCheckReadCheck
*!
!***> cleanup: Remove binary record for update 
!| RecordEndpointFixture |
| authToken | type | id | testDeleteRecord? | getStatusType? |
| $adminAuthToken | binary | $unpublishedBinaryForUpdateId | | OK |
*!