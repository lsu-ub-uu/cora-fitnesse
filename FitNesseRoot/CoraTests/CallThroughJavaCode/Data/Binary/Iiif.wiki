---
Test
---
!2 IIIF protocol in binary for images
A binary record for an image has information about how to access the image using the IIIF protocol. This information can be found as IIIF in the top level element otherProtocols. 
Other protocols contain information about how to access the image using the IIIF protocol, if:
 * a JP2 representation has been generated for the uploaded file
 and 
 * the user has the required permissions to read it
 or 
 * the binary is published. 
All cases will make sure there is no IIIF protocol information when the binary record is created, or when the file is first uploaded.
 * '''Case 1:''' IIIF protocol information must be present with a user that has permissions to read the jp2 representation. Information must contain a server and identifier properties. 
 * '''Case 2:''' IIIF protocol information must '''not''' be present with a user that has '''no''' permissions to read the jp2 representation.
 * '''Case 3:''' When reading an any other binary that is not an image then IIIF protocol information should not be present.
 
!***> Setup
!define unpublishedBinary {!-{"name":"binary","children":[{"name":"recordInfo","children":[{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"systemOne"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"genericBinary"}]}]},{"name":"adminInfo","children":[{"name":"visibility","value":"unpublished"}]},{"name":"originalFileName","value":"-!${originalFileName}!-"},{"name":"expectedFileSize","value":"-!${expectedFileSize}!-"}],"attributes":{"type":"generic"}}-!}
!define publishedBinary {!-{"name":"binary","children":[{"name":"recordInfo","children":[{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"systemOne"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"genericBinary"}]}]},{"name":"adminInfo","children":[{"name":"visibility","value":"published"}]},{"name":"originalFileName","value":"-!${originalFileName}!-"},{"name":"expectedFileSize","value":"-!${expectedFileSize}!-"}],"attributes":{"type":"generic"}}-!}
*!

!***> '''Case 1''' We use guestAuthToken to read an unpublished binary record
!*< definition
!define originalFileName {aTiff.tiff}
!define expectedFileSize {54452040}
!define createData unpublishedBinary
*!
!include -seamless .CoraTests.CallThroughJavaCode.Data.Binary.CreateBinaryUploadImageAndWait

!| ChildComparerFixture                                                                                                                                  |
|authToken          |type         |id         |testReadAndStoreRecord?                                                                                   |
|${currentAuthToken}|${recordType}|${recordId}|=~/[!-"otherProtocols":\{"iiif":\{"server":"${systemUnderTestUrl}iiif\/","identifier":"binary:\d*"\}\}-!]/|

!define iiifServerUrl (${systemUnderTestUrl}iiif/)

!define expectedXpath {//otherProtocols/iiif/server[text() = '${iiifServerUrl}']
//otherProtocols/iiif/identifier[text() = '${recordId}']}
!include -seamless .HelperPages.readRecordInXML

*!

!***> '''Case 2''' We use userAuthToken to read an unpublished binary record
!define currentAuthToken {$userAuthToken}

!| ChildComparerFixture |
| authToken | type | id | testReadAndStoreRecord? |
| ${currentAuthToken} | ${recordType} | ${recordId} |=~/!-^(?!.*(iiif).*).+$-!/ |

!define iiifServerUrl (${systemUnderTestUrl}iiif/)

!define expectedXpath {count(//otherProtocols) = 0}
!include -seamless .HelperPages.readRecordInXML

!***> Cleanup case 1 and case 2
!include -seamless .HelperPages.deleteRecord
*!
*!
!***> '''Case 3'''
!include -seamless .HelperPages.defineAdminAuthToken
!define originalFileName {aZip.zip}
!define expectedFileSize {144}
!define createData publishedBinary

!include -seamless .CoraTests.CallThroughJavaCode.Data.Binary.CreateBinaryAndUploadFile

!| ChildComparerFixture                                                                                                                                           |
|authToken          |type         |id         |testReadAndStoreRecord?                                                                                            |
|${currentAuthToken}|${recordType}|${recordId}|=~/[!-^(?!.*"otherProtocols":\{"iiif":\{"server":"${systemUnderTestUrl}iiif\/","identifier":"binary:\d*"\}\}).*-!]/|

!define expectedXpath {count(//otherProtocols) = 0}
!include -seamless .HelperPages.readRecordInXML

!***> Cleanup case 3
!include -seamless .HelperPages.deleteRecord
*!
*!
