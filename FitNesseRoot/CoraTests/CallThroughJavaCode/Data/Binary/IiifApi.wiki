---
Static
---
!2 IIIF API
This section test the IIIF API in Cora. The test will call the IIIF Api using http requests.

 * '''Case 1:''' It should be possible to read a binary image that is published and has been converted to JP2 using IIIF protocol. 
 * '''Case 2:''' It should not be possible to read a binary image that is unpublished, it should return Forbbiden (401) 
 * '''Case 3:''' Trying to read any other binary should return Not Found (404).  
 * '''Case 4:''' Trying to read a record that does not exist should return Not Found (404). 

!***> '''Case 1'''
In this case we create a binary record with visibility "published", then we upload an image and we wait until the convertion to JP2 is completed. Once this is done we call iiif endpoint three time.
 * Request info.json file
 * Request full image
 * Request a part of the image.

!***> definition
!define originalFileName {aTiff.tiff}
!define expectedFileSize {54452040}
!define publishedBinary {!-{"name":"binary","children":[{"name":"recordInfo","children":[{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"systemOne"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"genericBinary"}]}]},{"name":"adminInfo","children":[{"name":"visibility","value":"published"}]},{"name":"originalFileName","value":"-!${originalFileName}!-"},{"name":"expectedFileSize","value":"-!${expectedFileSize}!-"}],"attributes":{"type":"generic"}}-!}
!define createData publishedBinary
*!
!include -seamless .CoraTests.CallThroughJavaCode.Data.Binary.CreateBinaryUploadImageAndWait

Get info.json
!| Table:smartrics.rest.fitnesse.fixture.RestFixture|${systemUnderTestUrl}iiif/                                                                                         |
|GET                                                |/$tmpRecordId1/info.json|200|Content-Type : application/ld\+json;profile="http://iiif.io/api/image/3/context.json"||

Get full image
!| Table:smartrics.rest.fitnesse.fixture.RestFixture|${systemUnderTestUrl}iiif/                                          |
|GET                                                |/$tmpRecordId1/full/244,/0/default.jpg|200|Content-Type: image/jpeg||

Get a section of the image
!| Table:smartrics.rest.fitnesse.fixture.RestFixture|${systemUnderTestUrl}iiif/                                                             |
|GET                                                |/$tmpRecordId1/2048,2048,2048,2048/!256,256/0/default.jpg|200|Content-Type: image/jpeg||

!include -seamless .HelperPages.deleteRecord
*!
!***> '''Case 2'''
In this case we create a binary record with visibility "unpublished", then we upload an image and we wait until the convertion to JP2 is completed. Once this is done we call iiif endpoint three time.
 * Request info.json file
 * Request full image
 * Request a part of the image.
All of them should return 401 Forbidden.

!***> definition
!define originalFileName {aTiff.tiff}
!define unpublishedBinary {!-{"name":"binary","children":[{"name":"recordInfo","children":[{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"systemOne"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"genericBinary"}]}]},{"name":"adminInfo","children":[{"name":"visibility","value":"unpublished"}]},{"name":"originalFileName","value":"-!${originalFileName}!-"},{"name":"expectedFileSize","value":"-!${expectedFileSize}!-"}],"attributes":{"type":"generic"}}-!}
!define createData unpublishedBinary
*!
!include -seamless .CoraTests.CallThroughJavaCode.Data.Binary.CreateBinaryUploadImageAndWait

!| Table:smartrics.rest.fitnesse.fixture.RestFixture|${systemUnderTestUrl}iiif/    |
|GET                                                |/$tmpRecordId1/info.json|401|||

Get full image
!| Table:smartrics.rest.fitnesse.fixture.RestFixture|${systemUnderTestUrl}iiif/                  |
|GET                                                |/$tmpRecordId1/full/244,/0/default.jpg|401|||

Get a section of the image
!| Table:smartrics.rest.fitnesse.fixture.RestFixture|${systemUnderTestUrl}iiif/                                     |
|GET                                                |/$tmpRecordId1/2048,2048,2048,2048/!256,256/0/default.jpg|401|||

!include -seamless .HelperPages.deleteRecord
*!
!***> '''Case 3''' 
In this case we create a binary record with visibility "published", then we upload an compressed file and we wait it is stored in cora. Once this is done we try to get info.json from that file. This should not work.
!***> definition
!define originalFileName {aZip.zip}
!define expectedFileSize {144}
!define publishedBinary {!-{"name":"binary","children":[{"name":"recordInfo","children":[{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"systemOne"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"genericBinary"}]}]},{"name":"adminInfo","children":[{"name":"visibility","value":"published"}]},{"name":"originalFileName","value":"-!${originalFileName}!-"},{"name":"expectedFileSize","value":"-!${expectedFileSize}!-"}],"attributes":{"type":"generic"}}-!}
!define createData publishedBinary
*!
!include -seamless .CoraTests.CallThroughJavaCode.Data.Binary.CreateBinaryAndUploadFile

!| Table:smartrics.rest.fitnesse.fixture.RestFixture|${systemUnderTestUrl}iiif/    |
|GET                                                |/$tmpRecordId1/info.json|404|||

#TODO: 404 it should be thrown from spider and we should get Content-Type : text/html;charset=utf-8
#!| Table:smartrics.rest.fitnesse.fixture.RestFixture|${systemUnderTestUrl}iiif/                                          |
#|GET                                                |/$tmpRecordId1/info.json|404|Content-Type : text/html;charset=utf-8||

!include -seamless .HelperPages.deleteRecord
*!
!***> '''Case 4''' 
In this case we try to read an image with a record id that does not exists.
!| Table:smartrics.rest.fitnesse.fixture.RestFixture|${systemUnderTestUrl}iiif/                                                   |
|GET                                                |/aNonExixtingIdentifier/info.json|404|Content-Type : text/html;charset=utf-8||
*!

