---
Test
---
!2 IIIF API
This section test the IIIF API in Cora. The test will call the IIIF Api using http requests.

 * '''Case 1:''' It should be possible to read a binary image that is published and has been converted to JP2. 
 * '''Case 2:''' It should not be possible to read a binary image that is unpublished, it should return Forbbiden (401) 
 * '''Case 3:''' Trying to read any other binary should return Not Found (404).  
 * '''Case 4:''' Trying to read a record that does not exist should return Not Found (404). 

 
!***> IIIF test setup
This setup upload an image and supply the information we need for the upcoming tests such as 
record id ($tmpRecordId1), iiif server url etc.



*!
!***> '''Case 1'''
 
 !define originalFileName {aTiff.tiff}
!define publishedBinary {!-{"name":"binary","children":[{"name":"recordInfo","children":[{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"systemOne"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"genericBinary"}]}]},{"name":"adminInfo","children":[{"name":"visibility","value":"published"}]},{"name":"originalFileName","value":"-!${originalFileName}!-"},{"name":"expectedFileSize","value":"-!${expectedFileSize}!-"}],"attributes":{"type":"generic"}}-!}
!define createData publishedBinary
!include -seamless .CoraTests.CallThroughJavaCode.Data.Binary.UploadImageAndWait

!| Table:smartrics.rest.fitnesse.fixture.RestFixture | ${systemUnderTestUrl}iiif/ |
| GET | /$tmpRecordId1/info.json | 200 | Content-Type : application/ld\+json;profile="http://iiif.io/api/image/3/context.json" | |

!***> Clean up example fitnesse pool
!| RecordEndpointFixture |
| authToken | type | id | testDeleteRecord? | getStatusType? |
| $adminAuthToken | binary | $tmpRecordId1 | | OK |
*!
*!

!***> '''Case 2'''
!define originalFileName {aTiff.tiff}
!define unpublishedBinary {!-{"name":"binary","children":[{"name":"recordInfo","children":[{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"systemOne"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"genericBinary"}]}]},{"name":"adminInfo","children":[{"name":"visibility","value":"unpublished"}]},{"name":"originalFileName","value":"-!${originalFileName}!-"},{"name":"expectedFileSize","value":"-!${expectedFileSize}!-"}],"attributes":{"type":"generic"}}-!}
!define createData unpublishedBinary
!include -seamless .CoraTests.CallThroughJavaCode.Data.Binary.UploadImageAndWait

!| Table:smartrics.rest.fitnesse.fixture.RestFixture | ${systemUnderTestUrl}iiif/ |
| GET | /$tmpRecordId1/info.json | 401 | Content-Type : text/html;charset=utf-8 | |

*!

!***> '''Case 4''' Trying to read a record that does not exist should return Not Found (404). 
!| Table:smartrics.rest.fitnesse.fixture.RestFixture | ${systemUnderTestUrl}iiif/ |
| GET | /aNonExixtingIdentifier/info.json | 404 | Content-Type : text/html;charset=utf-8 | |
*!

