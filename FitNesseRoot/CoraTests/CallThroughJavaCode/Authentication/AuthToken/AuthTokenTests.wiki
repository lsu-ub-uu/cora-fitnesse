---
Static
---
 * '''Case 1: ''' It should be possible to read public data without supplying an authToken
 * '''Case 2: ''' An invalid token should result in an ''UNAUTHORIZED'' response from the system
 * '''Case 3: ''' Creating data using an authToken should result in the userId automatically being attached to "createdBy"
 * '''Case 4: ''' An authToken should contain all expected data attached to the token when its created
 * '''Case 5: ''' It must be possible to renew the authToken within the ''validUntil'' time limit
 * !style_red['''Case 6: ''' It must not be possible to renew the authToken after the ''validUntil'' time limit is reached] //-- '''implement after validUntil is adjustable'''
 * !style_red['''Case 7: ''' It must not be possible to renew the authToken after the ''renewUntil'' time limit is reached] //-- '''implement after renewUntil is adjustable'''
 * '''Case 8: ''' It must be possible to delete an authToken
 

!***> '''Case 1: ''' It should be possible to read public data without supplying an authToken
!| RecordEndpointFixture |
| authToken | type | id | testReadRecord? | getStatusType? |
| | metadata | idTextVar | | OK |

*!
!***> '''Case 2: ''' An invalid token should result in an UNAUTHORIZED response from the system
!| RecordEndpointFixture |
| authToken | type | id | testReadRecord? | getStatusType? |
| dummyUnauthenticatedToken | metadata | idTextVar | | UNAUTHORIZED |

*!
!***> '''Case 3: ''' Creating data using an authToken should result in the userId automatically being attached to "createdBy"
!define expectedAdminResponse {!-{"children":[{"children":[{"name":"id","value":"myAuthText"},{"children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"cora"}],"name":"dataDivider"},{"children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"textSystemOne"}],"name":"validationType"}],"name":"recordInfo"},{"children":[{"name":"text","value":"Min svenska text"}],"name":"textPart","attributes":{"type":"default","lang":"sv"}}],"name":"text"}-!}
!define expecteduserResponse {!-{"children":[{"children":[{"name":"id","value":"myAuth3Text"},{"children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"cora"}],"name":"dataDivider"},{"children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"textSystemOne"}],"name":"validationType"}],"name":"recordInfo"},{"children":[{"name":"text","value":"Min andra text pÃ¥ svenska"}],"name":"textPart","attributes":{"type":"default","lang":"sv"}},{"children":[{"name":"text","value":"My second text in english"}],"name":"textPart","attributes":{"type":"alternative","lang":"en"}}],"name":"text"}-!}

!| RecordEndpointFixture |
| authToken | type | json | testCreateRecord? | getStatusType? |
| $adminAuthToken | text | ${expectedAdminResponse} | =~/"name":"linkedRecordId",\s*"value":"131313"/ | CREATED |
| $userAuthToken | text | ${expecteduserResponse} | =~/"name":"linkedRecordId",\s*"value":"121212"/ | CREATED |

*!
!***> '''Case 4: ''' An authToken should contain all expected data attached to the token when its created
!define renewAccept {!-application/vnd.uub.authentication+json-!}
!define expectedPermissionUnits {[fitnesseUserPermissionUnit, fitnesseUserPermissionUnit2]}

!***> Check apptoken login authentication content
!| AuthenticationFixture |
| appTokenLogin? | loginId | getStatusType? | getUserId? | getLoginId? | getFirstName? | getLastName? | getPermissionUnitIds? | getAuthToken? | getRenewUrl? | getRenewAccept? | getDeleteUrl? |
| | fitnesseUser@system.cora.uu.se | CREATED | 121212 | fitnesseUser@system.cora.uu.se | Fitnesse | User | ${expectedPermissionUnits} | $createdAuthToken= | $renewAuthTokenUrl= | ${renewAccept} | $deleteAuthTokenUrl= |

*!
!***> Check idp login authentication content
!define actionLinkUrlRegex {!-=~/http:\/\/[a-zA-Z0-9.-]+(:[0-9]{1,5})?\/login\/rest\/authToken\/[a-f0-9\\-]{36}/-!}
!define authTokenRegex {!-=~/([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})/-!}
!| AuthenticationFixture |
| idpLogin? | EPPN | getStatusType? | getUserId? | getLoginId? | getFirstName? | getLastName? | getPermissionUnitIds? | getAuthToken? | getRenewUrl? | getRenewAccept? | getDeleteUrl? |
| | fitnesseUser@system.cora.uu.se | OK | 121212 | fitnesseUser@system.cora.uu.se | someFirstName | someLastName | ${expectedPermissionUnits} | ${authTokenRegex} | ${actionLinkUrlRegex} | ${renewAccept} | ${actionLinkUrlRegex} |

*!
!***> Check password login authentication content
!| AuthenticationFixture |
| passwordLogin? | loginId | password | getStatusType? | getUserId? | getLoginId? | getFirstName? | getLastName? |  getPermissionUnitIds? | getAuthToken? | getRenewUrl? | getRenewAccept? | getDeleteUrl? |
| | fitnesseUser@system.cora.uu.se | password | CREATED | 121212 | fitnesseUser@system.cora.uu.se | Fitnesse | User | ${expectedPermissionUnits} | ${authTokenRegex} | ${actionLinkUrlRegex} | ${renewAccept} | ${actionLinkUrlRegex} |
*!

'''Ensure it's possible to read a post using the created authToken'''
!| RecordEndpointFixture |
| authToken | type | id | testReadRecord? | getStatusType? |
| $createdAuthToken | metadata | idTextVar | | OK |

*!
!***> '''Case 5: ''' It must be possible to renew the authToken within the ''validUntil'' time limit
!| AuthenticationFixture |
| renewAuthToken? | authTokenRenewUrl | existingAuthToken | getStatusType? | getUserId? | getLoginId? | getFirstName? | getLastName? | getAuthToken? | getRenewUrl? | getRenewAccept? | getDeleteUrl? |
| | $renewAuthTokenUrl | $createdAuthToken | OK | 121212 | fitnesseUser@system.cora.uu.se | Fitnesse | User | $renewedAuthToken= | $renewAuthTokenUrl= | ${renewAccept} | $deleteAuthTokenUrl= |

#### The old authToken will live for the duration of "validUntil" and automatically get deleted after this.
#### Test is set to disabled until its possible to manually override this limit to avoid a stalling test.
#'''Ensure that the old authToken is invalid...'''
#!| RecordEndpointFixture |
#| authToken | type | id | testReadRecord? | getStatusType? |
#| $createdAuthToken | metadata | idTextVar | | UNAUTHORIZED |

'''Ensure the renewed one works as expected.'''
!| RecordEndpointFixture |
| authToken | type | id | testReadRecord? | getStatusType? |
| $renewedAuthToken | metadata | idTextVar | | OK |

*!
!***> '''Case 8: ''' It must be possible to delete an authToken
!| AuthenticationFixture |
| deleteAuthToken? | authTokenDeleteUrl | existingAuthToken | getStatusType? |
| | $renewAuthTokenUrl | $renewedAuthToken | OK |

'''Ensure that the renewed authToken is invalid after deletion'''
!| RecordEndpointFixture |
| authToken | type | id | testReadRecord? | getStatusType? |
| $renewedAuthToken | metadata | idTextVar | | UNAUTHORIZED |
*!

!***> Clean up created data
!| RecordEndpointFixture |
| authToken | type | id | testDeleteRecord? | getStatusType? |
| $adminAuthToken | text | myAuthText | | OK |
| $userAuthToken | text | myAuth3Text | | OK |
*!