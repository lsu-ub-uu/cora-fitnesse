---
Static
---
!3 Password Login

 * '''Case 1:''' A user without a password should not be able to log in
 * '''Case 2:''' It must be possible to set a password for a user
   * '''Case 2a:''' The user must be able to log in with that password
 * '''Case 3:''' It should be possible to change the password
   * '''Case 3a:''' The user must be able to log in with the new password
   * '''Case 3b:''' The user must not be able to log in with the old password
 * '''Case 4:''' It should be possible to set a user as inactive
   * '''Case 4a:''' The user must not be able to log in with its password 
 * '''Case 5:''' It should be possible to set a user as active again
   * '''Case 5a:''' The user must be able to log in with its password
 * '''Case 6:''' It should be possible to remove a password
   * '''Case 6a:''' The user must not be able to log in with the now removed password
   * '''Case 6b:''' The user must not be able to log in when user is set to not use passwords and a new password is given. 
 * '''Case 7:''' A user that has no password previously set and the user is updated to use password but no new password provided, then a validation error is received. 
 * '''Case 8:''' A user that has password previously set and the user is updated to use password but no new password provided, then the previous password is kept.
   * '''Case 8a:''' The user must not be able to log in with the password



 * '''Case X1:''' There are limits on how many login attempts are allowed
   * Five failed attempts are followed by a period of time when the login is unavailable for a user
 * '''Case Y1:''' The ability to manage passwords must be controlled by set rights


!***> '''Case 1a''' user without a password should not be able to log in
!| AuthenticationFixture |
| passwordLogin? | loginId | password | getStatusType? |
| | password@login.fake | password | UNAUTHORIZED |
*!

!***> '''Setup Case 2''' update, with plainTextPassword: password
!| RecordEndpointFixture |
| authToken | type | id | json | testUpdateRecord? | getStatusType? | 
| $adminAuthToken | user | $passwordUserId | ${passwordUserUpdateWithPasswordPasswordJson} | | OK | 
*!
!***> '''Case 2a''' The user must be able to log in with that password
!define userIdRegEx {!-=~/user:\d{15}/-!}
!define authTokenRegex {!-=~/([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})/-!}
!define actionLinkUrlRegEx {!-=~/http:\/\/[a-zA-Z0-9.-]+(:[0-9]{1,5})?\/login\/rest\/authToken\/[a-f0-9\\-]{36}/-!}
!define renewAccept {!-application/vnd.uub.authentication+json-!}

!| AuthenticationFixture |
| passwordLogin? | loginId | password | getStatusType? | getUserId? | getLoginId? | getFirstName? | getLastName? | getAuthToken? | getRenewUrl? | getRenewAccept? | getDeleteUrl? |
| | password@login.fake | password | CREATED | ${userIdRegEx} | password@login.fake | Password | Login | ${authTokenRegex} | ${actionLinkUrlRegEx} | ${renewAccept} | ${actionLinkUrlRegEx} |
*!

!***> '''Setup Case 3''' update, with plainTextPassword: otherPassword
!| RecordEndpointFixture |
| authToken | type | id | json | testUpdateRecord? | getStatusType? | 
| $adminAuthToken | user | $passwordUserId | ${passwordUserUpdateWithOtherPasswordJson} | =~/"name":\s*"usePassword",\s*"value":\s*"true"/ | OK | 
*!
!***> '''Case 3a''' The user must be able to log in with that password
!| AuthenticationFixture |
| passwordLogin? | loginId | password | getStatusType? | getAuthToken? |
| | password@login.fake | otherPassword | CREATED | ${authTokenRegex} |
*!
!***> '''Case 3b''' The user must not be able to log in with the old password
!| AuthenticationFixture |
| passwordLogin? | loginId | password | getStatusType? |
| | password@login.fake | password | UNAUTHORIZED |
*!

!***> '''Setup Case 4''' update, set user to inactive
!| RecordEndpointFixture |
| authToken | type | id | json | testUpdateRecord? | getStatusType? | 
| $adminAuthToken | user | $passwordUserId | ${passwordUserUpdateInactiveJson} | =~/"name":\s*"activeStatus",\s*"value":\s*"inactive"/ | OK | 
*!
!***> '''Case 4a''' The user must not be able to log in with its password 
!| AuthenticationFixture |
| passwordLogin? | loginId | password | getStatusType? |
| | password@login.fake | otherPassword | UNAUTHORIZED |
*!

!***> '''Setup Case 5''' update, set user to active
!| RecordEndpointFixture |
| authToken | type | id | json | testUpdateRecord? | getStatusType? | 
| $adminAuthToken | user | $passwordUserId | ${passwordUserUpdateActiveJson} | | OK | 
*!
!***> '''Case 5a''' The user must be able to log in with its password 
!| AuthenticationFixture |
| passwordLogin? | loginId | password | getStatusType? | getAuthToken? |
| | password@login.fake | otherPassword | CREATED | ${authTokenRegex} |
*!

!***> '''Setup Case 6''' update, set usePassword to false, no new password set.
!| RecordEndpointFixture |
| authToken | type | id | json | testUpdateRecord? | getStatusType? | 
| $adminAuthToken | user | $passwordUserId | ${passwordUserUpdateActiveWithUsePasswordFalseAndNoPasswordJson} | =~/"name":\s*"usePassword",\s*"value":\s*"false"/ | OK | 
*!
!***> '''Case 6a''' The user must not be able to log in with the now removed password 
!| AuthenticationFixture |
| passwordLogin? | loginId | password | getStatusType? |
| | password@login.fake | otherPassword | UNAUTHORIZED |
*!
!***> '''Setup Case 6b''' update, set usePassword to false, no new password set.
!| RecordEndpointFixture |
| authToken | type | id | json | testUpdateRecord? | getStatusType? | 
| $adminAuthToken | user | $passwordUserId | ${passwordUserUpdateActiveWithUsePasswordFalseAndHasPasswordJson} | | OK | 
*!
!***> '''Case 6b''' The user must not be able to log in when user is set to not use passwords and a new password is given.
!| AuthenticationFixture |
| passwordLogin? | loginId | password | getStatusType? |
| | password@login.fake | otherPassword | UNAUTHORIZED |
*!

!***> '''Case 7''' A user that has no password previously set and the user is updated to use password but no new password provided, then a validation error is received. 
!| RecordEndpointFixture |
| authToken | type | id | json | testUpdateRecord? | getStatusType? | 
| $adminAuthToken | user | $passwordUserId | ${passwordUserUpdateActiveWithUsePasswordFalseAndNoPasswordJson} | | OK | 
| $adminAuthToken | user | $passwordUserId | ${passwordUserUpdateActiveWithUsePasswordTrueAndNoPasswordJson} | Error updating record with recordType: user and recordId: $passwordUserId. UsePassword set to true but no old password or new password exists. | BAD_REQUEST | 
*!

!***> '''Case 8''' A user that has password previously set and the user is updated to use password but no new password provided, then the previous password is kept.
!| RecordEndpointFixture |
| authToken | type | id | json | testUpdateRecord? | getStatusType? | 
| $adminAuthToken | user | $passwordUserId | ${passwordUserUpdateWithPasswordPasswordJson} | | OK | 
| $adminAuthToken | user | $passwordUserId | ${passwordUserUpdateActiveWithUsePasswordTrueAndNoPasswordJson} | | OK | 
*!
!***> '''Case 8a''' The user must be able to log in with that password
!| AuthenticationFixture |
| passwordLogin? | loginId | password | getStatusType? | getAuthToken? |
| | password@login.fake | password | CREATED | ${authTokenRegex} |
*!