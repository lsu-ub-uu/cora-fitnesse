---
Test
---
!3 Password Login

!4 Password management
 * '''Case 1:''' It must be possible to set a password for a user and the user must be able to log in with that password
 * '''Case 2:''' It should be possible to change the password
   * It should be possible to log in with the new password
   * It should not be possible to log in with the old password
 * '''Case 3:''' It should be possible to remove a password
   * When a password is removed, a user can no longer log in
 * '''Case 4:''' The ability to manage passwords must be controlled by set rights
 
!4 REST API
 * '''Case 1:''' It must be possible to log in with a username and password
 * '''Case 2:''' A user (outside SWAMID) without a password should not be able to log in
 * '''Case 3:''' A user marked as inactive should not be able to log in
 * '''Case 4:''' There are limits on how many login attempts are allowed
   * Five failed attempts are followed by a period of time when the login is unavailable for a user

#!4 Assumptions:
# * No user is used when calling REST API in order to achieve to be unauthorized for systemSecret.
# * All json payloads sent to REST API uses same systemSecret minimal group. We just want at json that can be convreted to a DataGroup, we do not need that it validates.
# 
!***> Case 1
#!| Table:smartrics.rest.fitnesse.fixture.RestFixture|${appTokenVerifierUrl}rest/    |
#| setHeader | Accept:application/vnd.uub.record+json!-
#-!Content-Type:application/vnd.uub.record+json|
#| setBody | ${systemSecretMinimalGroup} |
#| POST | /loginPassword/ | 200 | | |
*!


!| Table:smartrics.rest.fitnesse.fixture.RestFixture|${appTokenVerifierUrl}rest/password/$passwordUserId    |
| setHeader | Accept:application/vnd.uub.record+json!-
-!Content-Type:text/plain;charset=UTF-8|
| setBody | password |
| POST | /record/systemSecret | 404 | | |
*!

update, with plainTextPassword: password
!*< passwordUserUpdateWithPasswordJson
!define passwordUserUpdateWithPasswordJson {!-{"children":[{"children":[{"children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}],"name":"dataDivider"},{"children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"coraUser"}],"name":"validationType"},{"name":"id","value":"-!$passwordUserId!-"},{"children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"user"}],"name":"type"},{"children":[{"name":"linkedRecordType","value":"user"},{"name":"linkedRecordId","value":"141414"}],"name":"createdBy"},{"name":"tsCreated","value":"2024-05-08T09:37:04.232294Z"},{"repeatId":"0","children":[{"children":[{"name":"linkedRecordType","value":"user"},{"name":"linkedRecordId","value":"141414"}],"name":"updatedBy"},{"name":"tsUpdated","value":"2024-05-08T09:37:04.232294Z"}],"name":"updated"},{"name":"ignoreOverwriteProtection","value":"true"}],"name":"recordInfo"},{"name":"userId","value":"password@login.fake"},{"name":"userFirstname","value":"Password"},{"name":"userLastname","value":"Login"},{"repeatId":"0","children":[{"children":[{"name":"linkedRecordType","value":"permissionRole"},{"name":"linkedRecordId","value":"nothing"}],"name":"userRole"}],"name":"userRole"},{"name":"activeStatus","value":"active"},{"name":"plainTextPassword","value":"password"}],"name":"user","attributes":{"type":"coraUser"}}-!}
*!
!| RecordEndpointFixture |
| authToken | type | id | json | testUpdateRecord? | getStatusType? | 
| $adminAuthToken | user | $passwordUserId | ${passwordUserUpdateWithPasswordJson} | | OK | 

!| Table:smartrics.rest.fitnesse.fixture.RestFixture|${appTokenVerifierUrl}rest/password/$passwordUserId    |
| setHeader | Accept:application/vnd.uub.record+json!-
-!Content-Type:text/plain;charset=UTF-8|
| setBody | password |
| POST | /record/systemSecret | 201 | | |
*!

{
  "data": {
    "children": [
      {"name": "id", "value": "c3ff1628-6133-497d-9939-f29c4f997ad2"},
      {"name": "validForNoSeconds", "value": "600"}                  ,
      {"name": "idInUserStorage", "value": "141414"}                 ,
      {"name": "idFromLogin", "value": "141414"}                     ,
      {"name": "firstName", "value": "JsClient"}                     ,
      {"name": "lastName", "value": "User"}
    ],
    "name": "authToken"
  },
  "actionLinks": {
    "delete": {
      "requestMethod": "DELETE"                                            ,
      "rel"          : "delete"                                            ,
      "url"          : "http://localhost:38180/login/rest/authToken/141414"
    }
  }
}

update, with plainTextPassword: otherPassword
!*< passwordUserUpdateWithOtherPasswordJson
!define passwordUserUpdateWithOtherPasswordJson {!-{"children":[{"children":[{"children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}],"name":"dataDivider"},{"children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"coraUser"}],"name":"validationType"},{"name":"id","value":"-!$passwordUserId!-"},{"children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"user"}],"name":"type"},{"children":[{"name":"linkedRecordType","value":"user"},{"name":"linkedRecordId","value":"141414"}],"name":"createdBy"},{"name":"tsCreated","value":"2024-05-08T09:37:04.232294Z"},{"repeatId":"0","children":[{"children":[{"name":"linkedRecordType","value":"user"},{"name":"linkedRecordId","value":"141414"}],"name":"updatedBy"},{"name":"tsUpdated","value":"2024-05-08T09:37:04.232294Z"}],"name":"updated"},{"name":"ignoreOverwriteProtection","value":"true"}],"name":"recordInfo"},{"name":"userId","value":"password@login.fake"},{"name":"userFirstname","value":"Password"},{"name":"userLastname","value":"Login"},{"repeatId":"0","children":[{"children":[{"name":"linkedRecordType","value":"permissionRole"},{"name":"linkedRecordId","value":"nothing"}],"name":"userRole"}],"name":"userRole"},{"name":"activeStatus","value":"active"},{"name":"plainTextPassword","value":"otherPassword"}],"name":"user","attributes":{"type":"coraUser"}}-!}
*!
!| RecordEndpointFixture |
| authToken | type | id | json | testUpdateRecord? | getStatusType? | 
| $adminAuthToken | user | $passwordUserId | ${passwordUserUpdateWithOtherPasswordJson} | | OK | 


