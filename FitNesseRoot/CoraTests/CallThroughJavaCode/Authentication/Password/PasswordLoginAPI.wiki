---
Static
---
!3 Password Login

 * '''Case 1:''' A user without a password should not be able to log in
 * '''Case 2:''' It must be possible to set a password for a user
   * '''Case 2a:''' The user must be able to log in with that password
 * '''Case 3:''' It should be possible to change the password
   * '''Case 3a:''' The user must be able to log in with the new password
   * '''Case 3b:''' The user must not be able to log in with the old password
 * '''Case 4:''' It should be possible to set a user as inactive
   * '''Case 4a:''' The user must not be able to log in with its password 
 * '''Case 5:''' It should be possible to set a user as active again
   * '''Case 5a:''' The user must be able to log in with its password
 * '''Case 6:''' It should be possible to remove a password
   * '''Case 6a:''' The user must not be able to log in with the now removed password
   * '''Case 6b:''' The user must not be able to log in when user is set to not use passwords and a new password is given. 
 * '''Case 7:''' A user that has no password previously set and the user is updated to use password but no new password provided, then a validation error is received. 
 * '''Case 8:''' A user that has password previously set and the user is updated to use password but no new password provided, then the previous password is kept.
   * '''Case 8a:''' The user must not be able to log in with the password



 * '''Case X1:''' There are limits on how many login attempts are allowed
   * Five failed attempts are followed by a period of time when the login is unavailable for a user
 * '''Case Y1:''' The ability to manage passwords must be controlled by set rights


!***> '''Case 1a''' user without a password should not be able to log in
!| Table:smartrics.rest.fitnesse.fixture.RestFixture|${appTokenVerifierUrl}rest    |
| setHeader | Accept:application/vnd.uub.record+json!-
-!Content-Type:text/plain;charset=UTF-8|
| setBody | password |
| POST | /password/password@login.fake | 401 | | |
*!

!***> update, with plainTextPassword: password
!| RecordEndpointFixture |
| authToken | type | id | json | testUpdateRecord? | getStatusType? | 
| $adminAuthToken | user | $passwordUserId | ${passwordUserUpdateWithPasswordPasswordJson} | | OK | 
*!
!***> '''Case 2a''' The user must be able to log in with that password
!| Table:smartrics.rest.fitnesse.fixture.RestFixture|${appTokenVerifierUrl}rest |
| setHeader | Accept:application/vnd.uub.record+json!-
-!Content-Type:text/plain;charset=UTF-8|
| setBody | password |
| POST | /password/password@login.fake | 201 | | |
| let | id | js | var patternMatch = /name":"id","value":"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})"}/ ; patternMatch.test(response.body) | true |
| let | validForNoSeconds | js | response.body.match(/validForNoSeconds","value":"([^"]+)"}/)[1] | 600 |
| let | idInUserStorage | js | response.body.match(/idInUserStorage","value":"([^"]+)"}/)[1] | $passwordUserId |
| let | idFromLogin | js | response.body.match(/idFromLogin","value":"([^"]+)"}/)[1] | password@login.fake |
| let | firstName | js | response.body.match(/firstName","value":"([^"]+)"}/)[1] | Password |
| let | lastName | js | response.body.match(/lastName","value":"([^"]+)"}/)[1] | Login |
| let | authToken | js | response.body.match(/name":"(authToken)"}/)[1] | authToken |
| let | actionLink | js | response.body.match(/actionLinks":{"delete":{"requestMethod":"DELETE","rel":"delete","url":"([^"]+)"}/)[1] | ${appTokenVerifierUrl}rest/authToken/$passwordUserId |
*!

!***> update, with plainTextPassword: otherPassword
!| RecordEndpointFixture |
| authToken | type | id | json | testUpdateRecord? | getStatusType? | 
| $adminAuthToken | user | $passwordUserId | ${passwordUserUpdateWithOtherPasswordJson} | | OK | 
*!

!***> '''Case 3a''' The user must be able to log in with that password
!| Table:smartrics.rest.fitnesse.fixture.RestFixture|${appTokenVerifierUrl}rest |
| setHeader | Accept:application/vnd.uub.record+json!-
-!Content-Type:text/plain;charset=UTF-8|
| setBody | otherPassword |
| POST | /password/password@login.fake | 201 | | |
| let | id | js | var patternMatch = /name":"id","value":"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})"}/ ; patternMatch.test(response.body) | true |
| let | validForNoSeconds | js | response.body.match(/validForNoSeconds","value":"([^"]+)"}/)[1] | 600 |
| let | idInUserStorage | js | response.body.match(/idInUserStorage","value":"([^"]+)"}/)[1] | $passwordUserId |
| let | idFromLogin | js | response.body.match(/idFromLogin","value":"([^"]+)"}/)[1] | password@login.fake |
| let | firstName | js | response.body.match(/firstName","value":"([^"]+)"}/)[1] | Password |
| let | lastName | js | response.body.match(/lastName","value":"([^"]+)"}/)[1] | Login |
| let | authToken | js | response.body.match(/name":"(authToken)"}/)[1] | authToken |
| let | actionLink | js | response.body.match(/actionLinks":{"delete":{"requestMethod":"DELETE","rel":"delete","url":"([^"]+)"}/)[1] | ${appTokenVerifierUrl}rest/authToken/$passwordUserId |
*!

!***> '''Case 3b''' The user must not be able to log in with the old password
!| Table:smartrics.rest.fitnesse.fixture.RestFixture|${appTokenVerifierUrl}rest |
| setHeader | Accept:application/vnd.uub.record+json!-
-!Content-Type:text/plain;charset=UTF-8|
| setBody | password |
| POST | /password/password@login.fake | 401 | | |
*!

!***> update, set user to inactive
!| RecordEndpointFixture |
| authToken | type | id | json | testUpdateRecord? | getStatusType? | 
| $adminAuthToken | user | $passwordUserId | ${passwordUserUpdateInactiveJson} | | OK | 
*!
!***> '''Case 4a''' The user must not be able to log in with its password 
!| Table:smartrics.rest.fitnesse.fixture.RestFixture|${appTokenVerifierUrl}rest |
| setHeader | Accept:application/vnd.uub.record+json!-
-!Content-Type:text/plain;charset=UTF-8|
| setBody | otherPassword |
| POST | /password/password@login.fake | 401 | | |
*!

!***> update, set user to active
!| RecordEndpointFixture |
| authToken | type | id | json | testUpdateRecord? | getStatusType? | 
| $adminAuthToken | user | $passwordUserId | ${passwordUserUpdateActiveJson} | | OK | 
*!
!***> '''Case 5a''' The user must be able to log in with its password 
!| Table:smartrics.rest.fitnesse.fixture.RestFixture|${appTokenVerifierUrl}rest |
| setHeader | Accept:application/vnd.uub.record+json!-
-!Content-Type:text/plain;charset=UTF-8|
| setBody | otherPassword |
| POST | /password/password@login.fake | 201 | | |
| let | id | js | var patternMatch = /name":"id","value":"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})"}/ ; patternMatch.test(response.body) | true |
| let | validForNoSeconds | js | response.body.match(/validForNoSeconds","value":"([^"]+)"}/)[1] | 600 |
| let | idInUserStorage | js | response.body.match(/idInUserStorage","value":"([^"]+)"}/)[1] | $passwordUserId |
| let | idFromLogin | js | response.body.match(/idFromLogin","value":"([^"]+)"}/)[1] | password@login.fake |
| let | firstName | js | response.body.match(/firstName","value":"([^"]+)"}/)[1] | Password |
| let | lastName | js | response.body.match(/lastName","value":"([^"]+)"}/)[1] | Login |
| let | authToken | js | response.body.match(/name":"(authToken)"}/)[1] | authToken |
| let | actionLink | js | response.body.match(/actionLinks":{"delete":{"requestMethod":"DELETE","rel":"delete","url":"([^"]+)"}/)[1] | ${appTokenVerifierUrl}rest/authToken/$passwordUserId |
*!
!***> update, set usePassword to false, no new password set.
!| RecordEndpointFixture |
| authToken | type | id | json | testUpdateRecord? | getStatusType? | 
| $adminAuthToken | user | $passwordUserId | ${passwordUserUpdateActiveWithUsePasswordFalseAndNoPasswordJson} | | OK | 
*!
!***> '''Case 6a''' The user must not be able to log in with the now removed password 
!| Table:smartrics.rest.fitnesse.fixture.RestFixture|${appTokenVerifierUrl}rest |
| setHeader | Accept:application/vnd.uub.record+json!-
-!Content-Type:text/plain;charset=UTF-8|
| setBody | otherPassword |
| POST | /password/password@login.fake | 401 | | |
*!
!***> update, set usePassword to false, no new password set.
!| RecordEndpointFixture |
| authToken | type | id | json | testUpdateRecord? | getStatusType? | 
| $adminAuthToken | user | $passwordUserId | ${passwordUserUpdateActiveWithUsePasswordFalseAndHasPasswordJson} | | OK | 
*!
!***> '''Case 6b''' The user must not be able to log in when user is set to not use passwords and a new password is given.
!| Table:smartrics.rest.fitnesse.fixture.RestFixture|${appTokenVerifierUrl}rest |
| setHeader | Accept:application/vnd.uub.record+json!-
-!Content-Type:text/plain;charset=UTF-8|
| setBody | otherPassword |
| POST | /password/password@login.fake | 401 | | |
*!
!***> '''Case 7''' A user that has no password previously set and the user is updated to use password but no new password provided, then a validation error is received. 
!| RecordEndpointFixture |
| authToken | type | id | json | testUpdateRecord? | getStatusType? | 
| $adminAuthToken | user | $passwordUserId | ${passwordUserUpdateActiveWithUsePasswordFalseAndNoPasswordJson} | | OK | 
| $adminAuthToken | user | $passwordUserId | ${passwordUserUpdateActiveWithUsePasswordTrueAndNoPasswordJson} | Error updating record with recordType: user and recordId: $passwordUserId. UsePassword set to true but no old password or new password exists. | BAD_REQUEST | 
*!
!***> '''Case 8''' A user that has password previously set and the user is updated to use password but no new password provided, then the previous password is kept.
!| RecordEndpointFixture |
| authToken | type | id | json | testUpdateRecord? | getStatusType? | 
| $adminAuthToken | user | $passwordUserId | ${passwordUserUpdateWithPasswordPasswordJson} | | OK | 
| $adminAuthToken | user | $passwordUserId | ${passwordUserUpdateActiveWithUsePasswordTrueAndNoPasswordJson} | | OK | 
*!
!***> '''Case 8a''' The user must be able to log in with that password
!| Table:smartrics.rest.fitnesse.fixture.RestFixture|${appTokenVerifierUrl}rest |
| setHeader | Accept:application/vnd.uub.record+json!-
-!Content-Type:text/plain;charset=UTF-8|
| setBody | password |
| POST | /password/password@login.fake | 201 | | |
*!