---
Test
---
!3 Password Login

 * '''Case 1:''' A user without a password should not be able to log in
 * '''Case 2:''' It must be possible to set a password for a user
   * '''Case 2a:''' The user must be able to log in with that password
 * '''Case 3:''' It should be possible to change the password
   * '''Case 3a:''' The user must be able to log in with the new password
   * '''Case 3b:''' The user must not be able to log in with the old password
 * '''Case 4:''' It should be possible to set a user as inactive
   * '''Case 4a:''' The user must not be able to log in with its password 
 * '''Case 5:''' It should be possible to set a user as active again
   * '''Case 5a:''' The user must be able to log in with its password
   
 * '''Case 6:''' It should be possible to remove a password
   * '''Case 6a:''' The user must not be able to log in with the now removed password



 * '''Case X1:''' There are limits on how many login attempts are allowed
   * Five failed attempts are followed by a period of time when the login is unavailable for a user
 * '''Case Y1:''' The ability to manage passwords must be controlled by set rights


!***> Case 1 A user without a password should not be able to log in
!| Table:smartrics.rest.fitnesse.fixture.RestFixture|${appTokenVerifierUrl}rest    |
| setHeader | Accept:application/vnd.uub.record+json!-
-!Content-Type:text/plain;charset=UTF-8|
| setBody | password |
| POST | /password/password@login.fake | 401 | | |
*!

!***> update, with plainTextPassword: password
!| RecordEndpointFixture |
| authToken | type | id | json | testUpdateRecord? | getStatusType? | 
| $adminAuthToken | user | $passwordUserId | ${passwordUserUpdateWithPasswordPasswordJson} | | OK | 
*!
!***> Case 2a The user must be able to log in with that password
!| Table:smartrics.rest.fitnesse.fixture.RestFixture|${appTokenVerifierUrl}rest |
| setHeader | Accept:application/vnd.uub.record+json!-
-!Content-Type:text/plain;charset=UTF-8|
| setBody | password |
| POST | /password/password@login.fake | 201 | | |
*!

!***> update, with plainTextPassword: otherPassword
!| RecordEndpointFixture |
| authToken | type | id | json | testUpdateRecord? | getStatusType? | 
| $adminAuthToken | user | $passwordUserId | ${passwordUserUpdateWithOtherPasswordJson} | | OK | 
*!

!***> Case 3a The user must be able to log in with that password
!| Table:smartrics.rest.fitnesse.fixture.RestFixture|${appTokenVerifierUrl}rest |
| setHeader | Accept:application/vnd.uub.record+json!-
-!Content-Type:text/plain;charset=UTF-8|
| setBody | otherPassword |
| POST | /password/password@login.fake | 201 | | |
*!

!***> Case 3b The user must not be able to log in with the old password
!| Table:smartrics.rest.fitnesse.fixture.RestFixture|${appTokenVerifierUrl}rest |
| setHeader | Accept:application/vnd.uub.record+json!-
-!Content-Type:text/plain;charset=UTF-8|
| setBody | password |
| POST | /password/password@login.fake | 401 | | |
*!

!***> update, set user to inactive
!| RecordEndpointFixture |
| authToken | type | id | json | testUpdateRecord? | getStatusType? | 
| $adminAuthToken | user | $passwordUserId | ${passwordUserUpdateInactiveJson} | | OK | 
*!
!***> Case 4a The user must not be able to log in with its password 
!| Table:smartrics.rest.fitnesse.fixture.RestFixture|${appTokenVerifierUrl}rest |
| setHeader | Accept:application/vnd.uub.record+json!-
-!Content-Type:text/plain;charset=UTF-8|
| setBody | otherPassword |
| POST | /password/password@login.fake | 401 | | |
*!

!***> update, set user to active
!| RecordEndpointFixture |
| authToken | type | id | json | testUpdateRecord? | getStatusType? | 
| $adminAuthToken | user | $passwordUserId | ${passwordUserUpdateActiveJson} | | OK | 
*!
!***> Case 5a The user must be able to log in with its password 
!| Table:smartrics.rest.fitnesse.fixture.RestFixture|${appTokenVerifierUrl}rest |
| setHeader | Accept:application/vnd.uub.record+json!-
-!Content-Type:text/plain;charset=UTF-8|
| setBody | otherPassword |
| POST | /password/password@login.fake | 201 | | |
*!


!1 What is that below???!!

{
  "data": {
    "children": [
      {"name": "id", "value": "c3ff1628-6133-497d-9939-f29c4f997ad2"},
      {"name": "validForNoSeconds", "value": "600"}                  ,
      {"name": "idInUserStorage", "value": "141414"}                 ,
      {"name": "idFromLogin", "value": "141414"}                     ,
      {"name": "firstName", "value": "JsClient"}                     ,
      {"name": "lastName", "value": "User"}
    ],
    "name": "authToken"
  },
  "actionLinks": {
    "delete": {
      "requestMethod": "DELETE"                                            ,
      "rel"          : "delete"                                            ,
      "url"          : "http://localhost:38180/login/rest/authToken/141414"
    }
  }
}

update, with plainTextPassword: otherPassword
!| RecordEndpointFixture |
| authToken | type | id | json | testUpdateRecord? | getStatusType? | 
| $adminAuthToken | user | $passwordUserId | ${passwordUserUpdateWithOtherPasswordJson} | | OK | 


