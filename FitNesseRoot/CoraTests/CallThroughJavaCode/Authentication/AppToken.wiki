---
Test
---
!1 AppToken
!2 What is an appToken
An appToken (short for application token) is a form of digital authentication token used in various applications to securely verify the identity of the application itself, rather than a user. Here are some key characteristics and uses of app tokens:

1. '''Authentication and Authorization''': AppTokens are used to authenticate the application making a request to a service or API, ensuring that the application has permission to access certain resources or perform specific actions.

2. '''Security''': By using appTokens, applications can securely interact with APIs and services without exposing sensitive credentials like usernames and passwords. This reduces the risk of credential theft or misuse.

3. '''Access Control''': AppTokens can encapsulate various permissions and roles, allowing fine-grained access control. This means different applications or instances of the same application can have different levels of access to resources based on the token they present.

4. '''Expiration and Renewal''': AppTokens typically have an expiration time to enhance security. After they expire, new tokens must be obtained to continue accessing services. This ensures that even if a token is compromised, its usefulness is limited to a specific time window.

5. '''Applications''': AppTokens are suited for applications, enabling them to operate autonomously within the permissions granted.

!2 Working with appTokens
!3 Create an appToken
Each user is able to create multiple appTokens, by just adding a new appToken and a note in the user configuration and updating the user. Once this is done an appToken is generated and stored (hashed) as a [[systemSecret][.CoraTests.CallThroughJavaCode.Authentication.Password.SystemSecret]]. The response of the update will contain the generated appToken as clear text. This clear text appToken will only be shown once, at '''appTokenClearText''' field, and never again. Make sure to copy it.

!4 Metadata definition included in User
 * '''user'''
   * ''' ... '''
   * '''appTokens''' (group, 0-1, readWrite)
     * '''appToken''' (group, 0-X, noConstraints)
       * '''appTokenLink''' (recordLink(systemSecret), 0-1, readWrite)
       * '''appTokenNote''' (text, 1-1, noConstraints)
       * '''appTokenClearText''' (text, 0-1, noConstraints)

!3 Use an appToken
In order to be authenticated by the system you need to have an [[authToken][.CoraTests.CallThroughJavaCode.Authentication.AuthToken]] . To get an authToken using an appToken you need to make a !style_pass(POST) call to '''${systemUnderTestUrl}rest/login/apptoken/{user}''' using the appToken as payload. The response will contain a valid authToken.
!style_darkRed[At this moment '''Access control''' and  '''Expiration and Renewal''' is not implemented.]

!3 Update the note of an existing appToken
The user is able to update the note of any single appToken of its own. This can be achieve buy changing the note in specific appToken.

!3 Delete an appToken
You can delete an appToken by simply removing its apptoken group in the user configuration and updating the user.

!2 Test cases
 * '''Case 1: ''' Any user should be able to create an appToken for his own user. (User already has one appToken)
 * '''Assert 1a: ''' ApptokenClearText must never be stored.
 * '''Case 2: ''' Any user should be able to read the appToken notes for his own user.
 * '''Case 3: ''' Any user should be able to login using its own appToken.
 * '''Case 4: ''' A user should not be able to login using another users appToken.
 * '''Case 5: ''' Any user should be able to update the note in any of its own appTokens.
 * '''Case 6: ''' Any user should be able to delete its own appToken.
 * '''Case 7: ''' A user should not be able to delete another users appToken.
# * '''Case 6: ''' A user should not be able to update the note to an appToken of its own.

!***> Prepare test data needed for tests (case 4 and 8):
!| Table:smartrics.rest.fitnesse.fixture.RestFixture | ${systemUnderTestUrl}rest/ |
| setHeader | Accept:application/vnd.uub.record+json!-
-!Content-Type:application/vnd.uub.record+json!-
-!authToken:$adminAuthToken |
| setBody | {"name":"user","children":[{"name":"recordInfo","children":[{"name":"id","value":"131313"},{"name":"type","children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"user"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"systemOneUser"}]},{"name":"ignoreOverwriteProtection","value":"true"},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"cora"}]},{"name":"createdBy","children":[{"name":"linkedRecordType","value":"user"},{"name":"linkedRecordId","value":"12345"}]},{"name":"tsCreated","value":"2017-10-01T00:00:00.000000Z"}]},{"name":"userId","value":"fitnesseAdmin@system.cora.uu.se"},{"name":"userFirstname","value":"Fitnesse"},{"name":"userLastname","value":"Admin"},{"name":"userRole","repeatId":"1","children":[{"name":"userRole","children":[{"name":"linkedRecordType","value":"permissionRole"},{"name":"linkedRecordId","value":"everything"}]},{"name":"permissionTermRulePart","repeatId":"0","children":[{"name":"rule","children":[{"name":"linkedRecordType","value":"collectTerm"},{"name":"linkedRecordId","value":"systemPermissionTerm"}]},{"name":"value","repeatId":"0","value":"system.*"}]}]},{"name":"userRole","repeatId":"3603423986673","children":[{"name":"userRole","children":[{"name":"linkedRecordType","value":"permissionRole"},{"name":"linkedRecordId","value":"binaryUserRole"}]}]},{"name":"activeStatus","value":"active"},{"name":"userAppTokenGroup","repeatId":"3603423986672","children":[{"name":"appTokenLink","children":[{"name":"linkedRecordType","value":"appToken"},{"name":"linkedRecordId","value":"appToken:3603190243788"}]},{"name":"note","value":"JsClient"}]},{"name":"usePassword","value":"false"},{"name":"tsPasswordUpdated","value":""},{"name":"appTokens","children":[{"name":"appToken","repeatId":"0","children":[{"name":"appTokenNote","value":"My admin advice"}]}]}],"attributes":{"type":"systemOneUser"}} |
| POST | /record/user/131313 | 200 | | |
| let | otherAppUserToken | js | response.body.match(/"appTokenClearText","value":"([^"]+)"}/)[1] | |
*!

!3 User tests
!***> '''Case 1: ''' Any user should be able to create an appToken for his own user. (User already has one appToken)
!| Table:smartrics.rest.fitnesse.fixture.RestFixture | ${systemUnderTestUrl}rest/ |
| setHeader | Accept:application/vnd.uub.record+json!-
-!Content-Type:application/vnd.uub.record+json!-
-!authToken:$userAuthToken |
| setBody | {"name":"user","children":[{"name":"recordInfo","children":[{"name":"id","value":"121212"},{"name":"type","children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"user"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"systemOneUser"}]},{"name":"ignoreOverwriteProtection","value":"true"},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"cora"}]},{"name":"createdBy","children":[{"name":"linkedRecordType","value":"user"},{"name":"linkedRecordId","value":"131313"}]},{"name":"tsCreated","value":"2017-10-01T00:00:00.000000Z"}]},{"name":"userId","value":"fitnesseUser@system.cora.uu.se"},{"name":"userFirstname","value":"Fitnesse"},{"name":"userLastname","value":"User"},{"name":"userRole","repeatId":"7175775086411621","children":[{"name":"userRole","children":[{"name":"linkedRecordType","value":"permissionRole"},{"name":"linkedRecordId","value":"fitnesseTextAdmin"}]},{"name":"permissionTermRulePart","repeatId":"0","children":[{"name":"rule","children":[{"name":"linkedRecordType","value":"collectTerm"},{"name":"linkedRecordId","value":"systemPermissionTerm"}]},{"name":"value","repeatId":"0","value":"system.*"}]}]},{"name":"activeStatus","value":"active"},{"name":"userAppTokenGroup","repeatId":"7175775086411619","children":[{"name":"appTokenLink","children":[{"name":"linkedRecordType","value":"appToken"},{"name":"linkedRecordId","value":"appToken:7175774276485719"}]},{"name":"note","value":"For fitnesse"}]},{"name":"usePassword","value":"false"},{"name":"tsPasswordUpdated","value":""},{"name":"appTokens","children":[{"name":"appToken","repeatId":"0","children":[{"name":"appTokenNote","value":"My device"}]}]}],"attributes":{"type":"systemOneUser"}} |
| POST | /record/user/121212 | 200 | | |
| let | appUserToken | js | response.body.match(/"appTokenClearText","value":"([^"]+)"}/)[1] | |
*!

#assert 1a: ApptokenClearText must never be stored. (combined check of data received in case 2?)
!***> '''Case 2: ''' Any user should be able to read the appToken notes for his own user.
!| Table:smartrics.rest.fitnesse.fixture.RestFixture | ${systemUnderTestUrl}rest/ |
| setHeader | Accept:application/vnd.uub.record+json!-
-!Content-Type:application/vnd.uub.record+json!-
-!authToken:$userAuthToken |
| GET | /record/user/121212 | 200 | | |
| let | note | js | response.body.match(/"note","value":"([^"]+)"}/)[1] | My device |
| let | appTokenClearTextShouldNotExist | js | var regExp = new RegExp('"appTokenClearText"') ; regExp.test(response.body) | false |
*!

!***> '''Case 3: ''' Any user should be able to login using its own appToken (the returned authToken ($appUserAuthToken) will be used for the rest of the test cases).
!| Table:smartrics.rest.fitnesse.fixture.RestFixture | ${appTokenVerifierUrl}rest/ |
| setHeader | Accept:application/vnd.uub.record+json!-
-!Content-Type:text/plain;charset=UTF-8 |
| setBody | %appUserToken% |
| POST | /apptoken/121212 | 200 | | $appUserAuthToken= |
*!

!***> '''Case 4: ''' A user should not be able to login using another users appToken.
!| Table:smartrics.rest.fitnesse.fixture.RestFixture | ${appTokenVerifierUrl}rest/ |
| setHeader | Accept:application/vnd.uub.record+json!-
-!Content-Type:text/plain;charset=UTF-8 |
| setBody | %otherAppUserToken% |
| POST | /apptoken/121212 | 403 | | |
*!

!***> '''Case 5: ''' Any user should be able to update the note in any of its own appTokens.
!| Table:smartrics.rest.fitnesse.fixture.RestFixture | ${systemUnderTestUrl}rest/ |
| setHeader | Accept:application/vnd.uub.record+json!-
-!Content-Type:application/vnd.uub.record+json!-
-!authToken:${appUserAuthToken} |
| setBody | {"children":[{"children":[{"children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}],"name":"dataDivider"},{"children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"appToken"}],"name":"validationType"}],"name":"recordInfo"},{"name":"note","value":"My updated note"}],"name":"appToken"} |
| POST | /record/user/121212 | 200 | | |
| let | updatedNote | js | response.body.match(/"appTokenNote","value":"([^"]+)"}/)[1]  | My updated note |
*!

#!***> '''Case 6: ''' A user should not be able to update the note to an appToken of its own. (???)
#!| Table:smartrics.rest.fitnesse.fixture.RestFixture | ${systemUnderTestUrl}rest/ |
#| setHeader | Accept:application/vnd.uub.record+json!-
#-!Content-Type:application/vnd.uub.record+json!-
#-!authToken:${appUserAuthToken} |
#| setBody | {"children":[{"children":[{"children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"testSystem"}],"name":"dataDivider"},{"children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"appToken"}],"name":"validationType"}],"name":"recordInfo"},{"name":"note","value":"My device"}],"name":"appToken"} |
#| POST | /record/user/131313 | 403 | | |
#*!
!***> '''Case 6: ''' Any user should be able to delete its own appToken.
!| Table:smartrics.rest.fitnesse.fixture.RestFixture | ${systemUnderTestUrl}rest/ |
| setHeader | Accept:application/vnd.uub.record+json!-
-!Content-Type:application/vnd.uub.record+json!-
-!authToken:${appUserAuthToken} |
| setBody | {"name":"user","children":[{"name":"recordInfo","children":[{"name":"id","value":"121212"},{"name":"type","children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"user"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"systemOneUser"}]},{"name":"ignoreOverwriteProtection","value":"true"},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"cora"}]},{"name":"createdBy","children":[{"name":"linkedRecordType","value":"user"},{"name":"linkedRecordId","value":"131313"}]},{"name":"tsCreated","value":"2017-10-01T00:00:00.000000Z"}]},{"name":"userId","value":"fitnesseUser@system.cora.uu.se"},{"name":"userFirstname","value":"Fitnesse"},{"name":"userLastname","value":"User"},{"name":"userRole","repeatId":"7175775086411621","children":[{"name":"userRole","children":[{"name":"linkedRecordType","value":"permissionRole"},{"name":"linkedRecordId","value":"fitnesseTextAdmin"}]},{"name":"permissionTermRulePart","repeatId":"0","children":[{"name":"rule","children":[{"name":"linkedRecordType","value":"collectTerm"},{"name":"linkedRecordId","value":"systemPermissionTerm"}]},{"name":"value","repeatId":"0","value":"system.*"}]}]},{"name":"activeStatus","value":"active"},{"name":"userAppTokenGroup","repeatId":"7175775086411619","children":[{"name":"appTokenLink","children":[{"name":"linkedRecordType","value":"appToken"},{"name":"linkedRecordId","value":"appToken:7175774276485719"}]},{"name":"note","value":"For fitnesse"}]},{"name":"usePassword","value":"false"},{"name":"tsPasswordUpdated","value":""}],"attributes":{"type":"systemOneUser"}} |
| POST | /record/user/121212 | 200 | | |
*!

!***> '''Case 7: ''' A user should not be able to delete another users appToken.
!| Table:smartrics.rest.fitnesse.fixture.RestFixture | ${systemUnderTestUrl}rest/ |
| setHeader | Accept:application/vnd.uub.record+json!-
-!Content-Type:application/vnd.uub.record+json!-
-!authToken:${appUserAuthToken} |
| setBody | {"name":"user","children":[{"name":"recordInfo","children":[{"name":"id","value":"131313"},{"name":"type","children":[{"name":"linkedRecordType","value":"recordType"},{"name":"linkedRecordId","value":"user"}]},{"name":"validationType","children":[{"name":"linkedRecordType","value":"validationType"},{"name":"linkedRecordId","value":"systemOneUser"}]},{"name":"ignoreOverwriteProtection","value":"true"},{"name":"dataDivider","children":[{"name":"linkedRecordType","value":"system"},{"name":"linkedRecordId","value":"cora"}]},{"name":"createdBy","children":[{"name":"linkedRecordType","value":"user"},{"name":"linkedRecordId","value":"12345"}]},{"name":"tsCreated","value":"2017-10-01T00:00:00.000000Z"}]},{"name":"userId","value":"fitnesseAdmin@system.cora.uu.se"},{"name":"userFirstname","value":"Fitnesse"},{"name":"userLastname","value":"Admin"},{"name":"userRole","repeatId":"1","children":[{"name":"userRole","children":[{"name":"linkedRecordType","value":"permissionRole"},{"name":"linkedRecordId","value":"everything"}]},{"name":"permissionTermRulePart","repeatId":"0","children":[{"name":"rule","children":[{"name":"linkedRecordType","value":"collectTerm"},{"name":"linkedRecordId","value":"systemPermissionTerm"}]},{"name":"value","repeatId":"0","value":"system.*"}]}]},{"name":"userRole","repeatId":"3603423986673","children":[{"name":"userRole","children":[{"name":"linkedRecordType","value":"permissionRole"},{"name":"linkedRecordId","value":"binaryUserRole"}]}]},{"name":"activeStatus","value":"active"},{"name":"userAppTokenGroup","repeatId":"3603423986672","children":[{"name":"appTokenLink","children":[{"name":"linkedRecordType","value":"appToken"},{"name":"linkedRecordId","value":"appToken:3603190243788"}]},{"name":"note","value":"JsClient"}]},{"name":"usePassword","value":"false"},{"name":"tsPasswordUpdated","value":""}],"attributes":{"type":"systemOneUser"}} |
| POST | /record/appToken/131313 | 403 | | |
*!

#!include -seamless .CoraTests.CallThroughJavaCode.Authentication.Password.SystemSecret

#!include -seamless .CoraTests.CallThroughJavaCode.Authentication.Password.PasswordLoginAPI
